/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/
// @generated by HipHop Compiler

#include <php/classes/arrayaccess.h>
#include <php/classes/exception.h>
#include <php/classes/iterator.h>
#include <php/classes/splfile.h>
#include <php/globals/constants.h>
#include <php/classes/arrayaccess.fws.h>
#include <php/classes/exception.fws.h>
#include <php/classes/iterator.fws.h>
#include <php/classes/splfile.fws.h>
#include <php/globals/constants.fws.h>
#include <runtime/ext/ext.h>
#include <runtime/eval/eval.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

/* preface starts */
extern CallInfo ci_;
/* preface finishes */
/* SRC: classes/iterator.php line 326 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ArrayIterator
Variant c_ArrayIterator::os_getInit(CStrRef s) {
  DECLARE_SYSTEM_GLOBALS(g);
  int64 hash = s->hash();
  switch (hash & 3) {
    case 1:
      HASH_RETURN_NAMSTR(0x7D2126D089B92EA5LL, NAMSTR(s_sys_ss7646d15b, "arr"),
                         null, 3);
      break;
    case 3:
      HASH_RETURN_NAMSTR(0x7401482B86AFCBFBLL, NAMSTR(s_sys_ss79503405, "flags"),
                         null, 5);
      break;
    default:
      break;
  }
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_ArrayIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_ArrayIterator
Variant c_ArrayIterator::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_ArrayIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ArrayIterator
Variant &c_ArrayIterator::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_ArrayIterator
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_ArrayIterator
void c_ArrayIterator::o_getArray(Array &props) const {
  if (isInitialized(m_arr)) props.add(NAMSTR(s_sys_ss00ce7919, "\000ArrayIterator\000arr"), m_arr.isReferenced() ? ref(m_arr) : m_arr, true);
  if (isInitialized(m_flags)) props.add(NAMSTR(s_sys_ss4f67744c, "\000ArrayIterator\000flags"), m_flags.isReferenced() ? ref(m_flags) : m_flags, true);
  c_ObjectData::o_getArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_ArrayIterator
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_ArrayIterator
void c_ArrayIterator::o_setArray(CArrRef props) {
  props->load(NAMSTR(s_sys_ss00ce7919, "\000ArrayIterator\000arr"), m_arr);
  props->load(NAMSTR(s_sys_ss4f67744c, "\000ArrayIterator\000flags"), m_flags);
  c_ObjectData::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_ArrayIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_ArrayIterator
Variant * c_ArrayIterator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
  int64 hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_GUARD_STRING(0x3D5870E53BF89873LL, ArrayIterator) { return o_realPropPrivate(prop, flags); }
      break;
    default:
      break;
  }
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_ArrayIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ArrayIterator
Variant * c_ArrayIterator::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_ArrayIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ArrayIterator
Variant * c_ArrayIterator::o_realPropPrivate(CStrRef s, int flags) const {
  int64 hash = s->hash();
  switch (hash & 3) {
    case 1:
      HASH_REALPROP_STRING(0x7D2126D089B92EA5LL, "arr", 3, arr);
      break;
    case 3:
      HASH_REALPROP_STRING(0x7401482B86AFCBFBLL, "flags", 5, flags);
      break;
    default:
      break;
  }
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_ArrayIterator
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_ArrayIterator
Variant c_ArrayIterator::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_ArrayIterator
IMPLEMENT_CLASS(ArrayIterator)
bool c_ArrayIterator::o_instanceof(CStrRef s) const {
  int64 hash = s->hash();
  switch (hash & 15) {
    case 1:
      HASH_INSTANCEOF(0x795F86375EE263D1LL, NAMSTR(s_sys_ss5ee263d1, "countable"));
      HASH_INSTANCEOF(0x66679538C5E6F0A1LL, NAMSTR(s_sys_ss3a190f5f, "traversable"));
      break;
    case 3:
      HASH_INSTANCEOF(0x3D5870E53BF89873LL, NAMSTR(s_sys_ss3bf89873, "arrayiterator"));
      HASH_INSTANCEOF(0x60C47E7FE145DC43LL, NAMSTR(s_sys_ss1eba23bd, "seekableiterator"));
      break;
    case 11:
      HASH_INSTANCEOF(0x3BDD11EABFCD6F0BLL, NAMSTR(s_sys_ss403290f5, "arrayaccess"));
      break;
    case 14:
      HASH_INSTANCEOF(0x0636A5F84AF9D29ELL, NAMSTR(s_sys_ss4af9d29e, "iterator"));
      break;
    default:
      break;
  }
  return false;
}
ObjectData *c_ArrayIterator::cloneImpl() {
  c_ArrayIterator *obj = NEW(c_ArrayIterator)();
  cloneSet(obj);
  return obj;
}
void c_ArrayIterator::cloneSet(c_ArrayIterator *clone) {
  clone->m_arr = m_arr.isReferenced() ? ref(m_arr) : m_arr;
  clone->m_flags = m_flags.isReferenced() ? ref(m_flags) : m_flags;
  ObjectData::cloneSet(clone);
}
Variant c_ArrayIterator::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  if (hash < 0) hash = hash_string(s);
  switch (hash & 63) {
    case 0:
      HASH_GUARD_LITSTR(0x3E6BCFB9742FC700LL, NAMSTR(s_sys_ss742fc700, "offsetExists")) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ArrayIterator::offsetExists", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_offsetexists(a0));
      }
      break;
    case 2:
      HASH_GUARD_LITSTR(0x4DEE4A472DC69EC2LL, NAMSTR(s_sys_ss2dc69ec2, "append")) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ArrayIterator::append", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_append(a0), null);
      }
      break;
    case 4:
      HASH_GUARD_LITSTR(0x6413CB5154808C44LL, NAMSTR(s_sys_ss54808c44, "valid")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ArrayIterator::valid", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_valid());
      }
      HASH_GUARD_LITSTR(0x4842AF70A71BE6C4LL, NAMSTR(s_sys_ss58e4193c, "uksort")) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ArrayIterator::uksort", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_uksort(a0));
      }
      break;
    case 6:
      HASH_GUARD_LITSTR(0x234F6A0A486E8646LL, NAMSTR(s_sys_ss486e8646, "natcasesort")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ArrayIterator::natcasesort", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_natcasesort());
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x2FC3A6941D522E0ALL, NAMSTR(s_sys_ss1d522e0a, "setFlags")) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ArrayIterator::setFlags", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_setflags(a0), null);
      }
      break;
    case 16:
      HASH_GUARD_LITSTR(0x5CEFA5A265104D10LL, NAMSTR(s_sys_ss65104d10, "count")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ArrayIterator::count", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_count());
      }
      break;
    case 17:
      HASH_GUARD_LITSTR(0x56EDB60C824E8C51LL, NAMSTR(s_sys_ss7db173af, "key")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ArrayIterator::key", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_key());
      }
      break;
    case 24:
      HASH_GUARD_LITSTR(0x61D11ECEF4404498LL, NAMSTR(s_sys_ss0bbfbb68, "offsetGet")) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ArrayIterator::offsetGet", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_offsetget(a0));
      }
      HASH_GUARD_LITSTR(0x70448A629A74FB18LL, NAMSTR(s_sys_ss658b04e8, "ksort")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ArrayIterator::ksort", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_ksort());
      }
      break;
    case 28:
      HASH_GUARD_LITSTR(0x5B3A4A72846B21DCLL, NAMSTR(s_sys_ss7b94de24, "current")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ArrayIterator::current", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_current());
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ss229c615f, "__construct")) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count < 1 || count > 2) return throw_wrong_arguments("ArrayIterator::__construct", count, 1, 2, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 1) return (t___construct(a0), null);
        else return (t___construct(a0, a1), null);
      }
      break;
    case 32:
      HASH_GUARD_LITSTR(0x6FACBD7F02B6FD60LL, NAMSTR(s_sys_ss02b6fd60, "uasort")) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ArrayIterator::uasort", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_uasort(a0));
      }
      break;
    case 33:
      HASH_GUARD_LITSTR(0x0E210679B2DFD461LL, NAMSTR(s_sys_ss4d202b9f, "getArrayCopy")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ArrayIterator::getArrayCopy", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getarraycopy());
      }
      HASH_GUARD_LITSTR(0x27E7DBA875AD17E1LL, NAMSTR(s_sys_ss75ad17e1, "getFlags")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ArrayIterator::getFlags", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getflags());
      }
      break;
    case 39:
      HASH_GUARD_LITSTR(0x7EF5445C77054C67LL, NAMSTR(s_sys_ss77054c67, "seek")) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ArrayIterator::seek", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_seek(a0), null);
      }
      break;
    case 42:
      HASH_GUARD_LITSTR(0x1670096FDE27AF6ALL, NAMSTR(s_sys_ss21d85096, "rewind")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ArrayIterator::rewind", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_rewind());
      }
      break;
    case 46:
      HASH_GUARD_LITSTR(0x790B7C44A3442BEELL, NAMSTR(s_sys_ss5cbbd412, "asort")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ArrayIterator::asort", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_asort());
      }
      break;
    case 51:
      HASH_GUARD_LITSTR(0x7DB9D839ACE0DEB3LL, NAMSTR(s_sys_ss531f214d, "natsort")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ArrayIterator::natsort", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_natsort());
      }
      break;
    case 56:
      HASH_GUARD_LITSTR(0x3C6D50F3BB8102B8LL, NAMSTR(s_sys_ss447efd48, "next")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("ArrayIterator::next", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_next());
      }
      HASH_GUARD_LITSTR(0x0957F693A48AF738LL, NAMSTR(s_sys_ss5b7508c8, "offsetSet")) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("ArrayIterator::offsetSet", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_offsetset(a0, a1));
      }
      break;
    case 58:
      HASH_GUARD_LITSTR(0x08329980E6369ABALL, NAMSTR(s_sys_ss19c96546, "offsetUnset")) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("ArrayIterator::offsetUnset", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_offsetunset(a0));
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_ArrayIterator::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  return c_ObjectData::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
CallInfo c_ArrayIterator::ci_getarraycopy((void*)&c_ArrayIterator::i_getarraycopy, (void*)&c_ArrayIterator::ifa_getarraycopy, 0, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_next((void*)&c_ArrayIterator::i_next, (void*)&c_ArrayIterator::ifa_next, 0, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_count((void*)&c_ArrayIterator::i_count, (void*)&c_ArrayIterator::ifa_count, 0, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_natsort((void*)&c_ArrayIterator::i_natsort, (void*)&c_ArrayIterator::ifa_natsort, 0, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_key((void*)&c_ArrayIterator::i_key, (void*)&c_ArrayIterator::ifa_key, 0, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_valid((void*)&c_ArrayIterator::i_valid, (void*)&c_ArrayIterator::ifa_valid, 0, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_append((void*)&c_ArrayIterator::i_append, (void*)&c_ArrayIterator::ifa_append, 1, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_setflags((void*)&c_ArrayIterator::i_setflags, (void*)&c_ArrayIterator::ifa_setflags, 1, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci___construct((void*)&c_ArrayIterator::i___construct, (void*)&c_ArrayIterator::ifa___construct, 2, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_offsetexists((void*)&c_ArrayIterator::i_offsetexists, (void*)&c_ArrayIterator::ifa_offsetexists, 1, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_uksort((void*)&c_ArrayIterator::i_uksort, (void*)&c_ArrayIterator::ifa_uksort, 1, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_offsetget((void*)&c_ArrayIterator::i_offsetget, (void*)&c_ArrayIterator::ifa_offsetget, 1, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_natcasesort((void*)&c_ArrayIterator::i_natcasesort, (void*)&c_ArrayIterator::ifa_natcasesort, 0, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_asort((void*)&c_ArrayIterator::i_asort, (void*)&c_ArrayIterator::ifa_asort, 0, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_offsetunset((void*)&c_ArrayIterator::i_offsetunset, (void*)&c_ArrayIterator::ifa_offsetunset, 1, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_seek((void*)&c_ArrayIterator::i_seek, (void*)&c_ArrayIterator::ifa_seek, 1, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_getflags((void*)&c_ArrayIterator::i_getflags, (void*)&c_ArrayIterator::ifa_getflags, 0, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_current((void*)&c_ArrayIterator::i_current, (void*)&c_ArrayIterator::ifa_current, 0, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_ksort((void*)&c_ArrayIterator::i_ksort, (void*)&c_ArrayIterator::ifa_ksort, 0, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_uasort((void*)&c_ArrayIterator::i_uasort, (void*)&c_ArrayIterator::ifa_uasort, 1, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_rewind((void*)&c_ArrayIterator::i_rewind, (void*)&c_ArrayIterator::ifa_rewind, 0, 0, 0x0000000000000000LL);
CallInfo c_ArrayIterator::ci_offsetset((void*)&c_ArrayIterator::i_offsetset, (void*)&c_ArrayIterator::ifa_offsetset, 2, 0, 0x0000000000000000LL);
Variant c_ArrayIterator::i_getarraycopy(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::getArrayCopy", 0, 1);
  return (self->t_getarraycopy());
}
Variant c_ArrayIterator::i_next(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::next", 0, 1);
  return (self->t_next());
}
Variant c_ArrayIterator::i_count(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::count", 0, 1);
  return (self->t_count());
}
Variant c_ArrayIterator::i_natsort(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::natsort", 0, 1);
  return (self->t_natsort());
}
Variant c_ArrayIterator::i_key(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::key", 0, 1);
  return (self->t_key());
}
Variant c_ArrayIterator::i_valid(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::valid", 0, 1);
  return (self->t_valid());
}
Variant c_ArrayIterator::i_append(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("ArrayIterator::append", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_append(arg0), null);
  }
}
Variant c_ArrayIterator::i_setflags(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("ArrayIterator::setFlags", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_setflags(arg0), null);
  }
}
Variant c_ArrayIterator::i___construct(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count < 1 || count > 2) return throw_wrong_arguments("ArrayIterator::__construct", count, 1, 2, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t___construct(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1), null);
  }
}
Variant c_ArrayIterator::i_offsetexists(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("ArrayIterator::offsetExists", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_offsetexists(arg0));
  }
}
Variant c_ArrayIterator::i_uksort(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("ArrayIterator::uksort", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_uksort(arg0));
  }
}
Variant c_ArrayIterator::i_offsetget(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("ArrayIterator::offsetGet", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_offsetget(arg0));
  }
}
Variant c_ArrayIterator::i_natcasesort(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::natcasesort", 0, 1);
  return (self->t_natcasesort());
}
Variant c_ArrayIterator::i_asort(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::asort", 0, 1);
  return (self->t_asort());
}
Variant c_ArrayIterator::i_offsetunset(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("ArrayIterator::offsetUnset", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_offsetunset(arg0));
  }
}
Variant c_ArrayIterator::i_seek(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("ArrayIterator::seek", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_seek(arg0), null);
  }
}
Variant c_ArrayIterator::i_getflags(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::getFlags", 0, 1);
  return (self->t_getflags());
}
Variant c_ArrayIterator::i_current(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::current", 0, 1);
  return (self->t_current());
}
Variant c_ArrayIterator::i_ksort(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::ksort", 0, 1);
  return (self->t_ksort());
}
Variant c_ArrayIterator::i_uasort(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("ArrayIterator::uasort", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_uasort(arg0));
  }
}
Variant c_ArrayIterator::i_rewind(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::rewind", 0, 1);
  return (self->t_rewind());
}
Variant c_ArrayIterator::i_offsetset(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 2) return throw_wrong_arguments("ArrayIterator::offsetSet", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t_offsetset(arg0, arg1));
  }
}
Variant c_ArrayIterator::ifa_getarraycopy(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::getArrayCopy", 0, 1);
  return (self->t_getarraycopy());
}
Variant c_ArrayIterator::ifa_next(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::next", 0, 1);
  return (self->t_next());
}
Variant c_ArrayIterator::ifa_count(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::count", 0, 1);
  return (self->t_count());
}
Variant c_ArrayIterator::ifa_natsort(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::natsort", 0, 1);
  return (self->t_natsort());
}
Variant c_ArrayIterator::ifa_key(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::key", 0, 1);
  return (self->t_key());
}
Variant c_ArrayIterator::ifa_valid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::valid", 0, 1);
  return (self->t_valid());
}
Variant c_ArrayIterator::ifa_append(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("ArrayIterator::append", count, 1, 1, 1);
  return (self->t_append(a0), null);
}
Variant c_ArrayIterator::ifa_setflags(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("ArrayIterator::setFlags", count, 1, 1, 1);
  return (self->t_setflags(a0), null);
}
Variant c_ArrayIterator::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count < 1 || count > 2) return throw_wrong_arguments("ArrayIterator::__construct", count, 1, 2, 2);
  if (count <= 1) return (self->t___construct(a0), null);
  return (self->t___construct(a0, a1), null);
}
Variant c_ArrayIterator::ifa_offsetexists(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("ArrayIterator::offsetExists", count, 1, 1, 1);
  return (self->t_offsetexists(a0));
}
Variant c_ArrayIterator::ifa_uksort(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("ArrayIterator::uksort", count, 1, 1, 1);
  return (self->t_uksort(a0));
}
Variant c_ArrayIterator::ifa_offsetget(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("ArrayIterator::offsetGet", count, 1, 1, 1);
  return (self->t_offsetget(a0));
}
Variant c_ArrayIterator::ifa_natcasesort(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::natcasesort", 0, 1);
  return (self->t_natcasesort());
}
Variant c_ArrayIterator::ifa_asort(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::asort", 0, 1);
  return (self->t_asort());
}
Variant c_ArrayIterator::ifa_offsetunset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("ArrayIterator::offsetUnset", count, 1, 1, 1);
  return (self->t_offsetunset(a0));
}
Variant c_ArrayIterator::ifa_seek(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("ArrayIterator::seek", count, 1, 1, 1);
  return (self->t_seek(a0), null);
}
Variant c_ArrayIterator::ifa_getflags(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::getFlags", 0, 1);
  return (self->t_getflags());
}
Variant c_ArrayIterator::ifa_current(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::current", 0, 1);
  return (self->t_current());
}
Variant c_ArrayIterator::ifa_ksort(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::ksort", 0, 1);
  return (self->t_ksort());
}
Variant c_ArrayIterator::ifa_uasort(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("ArrayIterator::uasort", count, 1, 1, 1);
  return (self->t_uasort(a0));
}
Variant c_ArrayIterator::ifa_rewind(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("ArrayIterator::rewind", 0, 1);
  return (self->t_rewind());
}
Variant c_ArrayIterator::ifa_offsetset(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_ArrayIterator *self = NULL;
  p_ArrayIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_ArrayIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_ArrayIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 2) return throw_wrong_arguments("ArrayIterator::offsetSet", count, 2, 2, 1);
  return (self->t_offsetset(a0, a1));
}
bool c_ArrayIterator::os_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 63) {
    case 0:
      HASH_GUARD_LITSTR(0x3E6BCFB9742FC700LL, NAMSTR(s_sys_ss742fc700, "offsetExists")) {
        mcp.ci = &c_ArrayIterator::ci_offsetexists;
        return true;
      }
      break;
    case 2:
      HASH_GUARD_LITSTR(0x4DEE4A472DC69EC2LL, NAMSTR(s_sys_ss2dc69ec2, "append")) {
        mcp.ci = &c_ArrayIterator::ci_append;
        return true;
      }
      break;
    case 4:
      HASH_GUARD_LITSTR(0x6413CB5154808C44LL, NAMSTR(s_sys_ss54808c44, "valid")) {
        mcp.ci = &c_ArrayIterator::ci_valid;
        return true;
      }
      HASH_GUARD_LITSTR(0x4842AF70A71BE6C4LL, NAMSTR(s_sys_ss58e4193c, "uksort")) {
        mcp.ci = &c_ArrayIterator::ci_uksort;
        return true;
      }
      break;
    case 6:
      HASH_GUARD_LITSTR(0x234F6A0A486E8646LL, NAMSTR(s_sys_ss486e8646, "natcasesort")) {
        mcp.ci = &c_ArrayIterator::ci_natcasesort;
        return true;
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x2FC3A6941D522E0ALL, NAMSTR(s_sys_ss1d522e0a, "setFlags")) {
        mcp.ci = &c_ArrayIterator::ci_setflags;
        return true;
      }
      break;
    case 16:
      HASH_GUARD_LITSTR(0x5CEFA5A265104D10LL, NAMSTR(s_sys_ss65104d10, "count")) {
        mcp.ci = &c_ArrayIterator::ci_count;
        return true;
      }
      break;
    case 17:
      HASH_GUARD_LITSTR(0x56EDB60C824E8C51LL, NAMSTR(s_sys_ss7db173af, "key")) {
        mcp.ci = &c_ArrayIterator::ci_key;
        return true;
      }
      break;
    case 24:
      HASH_GUARD_LITSTR(0x61D11ECEF4404498LL, NAMSTR(s_sys_ss0bbfbb68, "offsetGet")) {
        mcp.ci = &c_ArrayIterator::ci_offsetget;
        return true;
      }
      HASH_GUARD_LITSTR(0x70448A629A74FB18LL, NAMSTR(s_sys_ss658b04e8, "ksort")) {
        mcp.ci = &c_ArrayIterator::ci_ksort;
        return true;
      }
      break;
    case 28:
      HASH_GUARD_LITSTR(0x5B3A4A72846B21DCLL, NAMSTR(s_sys_ss7b94de24, "current")) {
        mcp.ci = &c_ArrayIterator::ci_current;
        return true;
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ss229c615f, "__construct")) {
        mcp.ci = &c_ArrayIterator::ci___construct;
        return true;
      }
      break;
    case 32:
      HASH_GUARD_LITSTR(0x6FACBD7F02B6FD60LL, NAMSTR(s_sys_ss02b6fd60, "uasort")) {
        mcp.ci = &c_ArrayIterator::ci_uasort;
        return true;
      }
      break;
    case 33:
      HASH_GUARD_LITSTR(0x0E210679B2DFD461LL, NAMSTR(s_sys_ss4d202b9f, "getArrayCopy")) {
        mcp.ci = &c_ArrayIterator::ci_getarraycopy;
        return true;
      }
      HASH_GUARD_LITSTR(0x27E7DBA875AD17E1LL, NAMSTR(s_sys_ss75ad17e1, "getFlags")) {
        mcp.ci = &c_ArrayIterator::ci_getflags;
        return true;
      }
      break;
    case 39:
      HASH_GUARD_LITSTR(0x7EF5445C77054C67LL, NAMSTR(s_sys_ss77054c67, "seek")) {
        mcp.ci = &c_ArrayIterator::ci_seek;
        return true;
      }
      break;
    case 42:
      HASH_GUARD_LITSTR(0x1670096FDE27AF6ALL, NAMSTR(s_sys_ss21d85096, "rewind")) {
        mcp.ci = &c_ArrayIterator::ci_rewind;
        return true;
      }
      break;
    case 46:
      HASH_GUARD_LITSTR(0x790B7C44A3442BEELL, NAMSTR(s_sys_ss5cbbd412, "asort")) {
        mcp.ci = &c_ArrayIterator::ci_asort;
        return true;
      }
      break;
    case 51:
      HASH_GUARD_LITSTR(0x7DB9D839ACE0DEB3LL, NAMSTR(s_sys_ss531f214d, "natsort")) {
        mcp.ci = &c_ArrayIterator::ci_natsort;
        return true;
      }
      break;
    case 56:
      HASH_GUARD_LITSTR(0x3C6D50F3BB8102B8LL, NAMSTR(s_sys_ss447efd48, "next")) {
        mcp.ci = &c_ArrayIterator::ci_next;
        return true;
      }
      HASH_GUARD_LITSTR(0x0957F693A48AF738LL, NAMSTR(s_sys_ss5b7508c8, "offsetSet")) {
        mcp.ci = &c_ArrayIterator::ci_offsetset;
        return true;
      }
      break;
    case 58:
      HASH_GUARD_LITSTR(0x08329980E6369ABALL, NAMSTR(s_sys_ss19c96546, "offsetUnset")) {
        mcp.ci = &c_ArrayIterator::ci_offsetunset;
        return true;
      }
      break;
    default:
      break;
  }
  return c_ObjectData::os_get_call_info(mcp, hash);
}
bool c_ArrayIterator::o_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 63) {
    case 0:
      HASH_GUARD_LITSTR(0x3E6BCFB9742FC700LL, NAMSTR(s_sys_ss742fc700, "offsetExists")) {
        mcp.ci = &c_ArrayIterator::ci_offsetexists;
        mcp.obj = this;
        return true;
      }
      break;
    case 2:
      HASH_GUARD_LITSTR(0x4DEE4A472DC69EC2LL, NAMSTR(s_sys_ss2dc69ec2, "append")) {
        mcp.ci = &c_ArrayIterator::ci_append;
        mcp.obj = this;
        return true;
      }
      break;
    case 4:
      HASH_GUARD_LITSTR(0x6413CB5154808C44LL, NAMSTR(s_sys_ss54808c44, "valid")) {
        mcp.ci = &c_ArrayIterator::ci_valid;
        mcp.obj = this;
        return true;
      }
      HASH_GUARD_LITSTR(0x4842AF70A71BE6C4LL, NAMSTR(s_sys_ss58e4193c, "uksort")) {
        mcp.ci = &c_ArrayIterator::ci_uksort;
        mcp.obj = this;
        return true;
      }
      break;
    case 6:
      HASH_GUARD_LITSTR(0x234F6A0A486E8646LL, NAMSTR(s_sys_ss486e8646, "natcasesort")) {
        mcp.ci = &c_ArrayIterator::ci_natcasesort;
        mcp.obj = this;
        return true;
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x2FC3A6941D522E0ALL, NAMSTR(s_sys_ss1d522e0a, "setFlags")) {
        mcp.ci = &c_ArrayIterator::ci_setflags;
        mcp.obj = this;
        return true;
      }
      break;
    case 16:
      HASH_GUARD_LITSTR(0x5CEFA5A265104D10LL, NAMSTR(s_sys_ss65104d10, "count")) {
        mcp.ci = &c_ArrayIterator::ci_count;
        mcp.obj = this;
        return true;
      }
      break;
    case 17:
      HASH_GUARD_LITSTR(0x56EDB60C824E8C51LL, NAMSTR(s_sys_ss7db173af, "key")) {
        mcp.ci = &c_ArrayIterator::ci_key;
        mcp.obj = this;
        return true;
      }
      break;
    case 24:
      HASH_GUARD_LITSTR(0x61D11ECEF4404498LL, NAMSTR(s_sys_ss0bbfbb68, "offsetGet")) {
        mcp.ci = &c_ArrayIterator::ci_offsetget;
        mcp.obj = this;
        return true;
      }
      HASH_GUARD_LITSTR(0x70448A629A74FB18LL, NAMSTR(s_sys_ss658b04e8, "ksort")) {
        mcp.ci = &c_ArrayIterator::ci_ksort;
        mcp.obj = this;
        return true;
      }
      break;
    case 28:
      HASH_GUARD_LITSTR(0x5B3A4A72846B21DCLL, NAMSTR(s_sys_ss7b94de24, "current")) {
        mcp.ci = &c_ArrayIterator::ci_current;
        mcp.obj = this;
        return true;
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ss229c615f, "__construct")) {
        mcp.ci = &c_ArrayIterator::ci___construct;
        mcp.obj = this;
        return true;
      }
      break;
    case 32:
      HASH_GUARD_LITSTR(0x6FACBD7F02B6FD60LL, NAMSTR(s_sys_ss02b6fd60, "uasort")) {
        mcp.ci = &c_ArrayIterator::ci_uasort;
        mcp.obj = this;
        return true;
      }
      break;
    case 33:
      HASH_GUARD_LITSTR(0x0E210679B2DFD461LL, NAMSTR(s_sys_ss4d202b9f, "getArrayCopy")) {
        mcp.ci = &c_ArrayIterator::ci_getarraycopy;
        mcp.obj = this;
        return true;
      }
      HASH_GUARD_LITSTR(0x27E7DBA875AD17E1LL, NAMSTR(s_sys_ss75ad17e1, "getFlags")) {
        mcp.ci = &c_ArrayIterator::ci_getflags;
        mcp.obj = this;
        return true;
      }
      break;
    case 39:
      HASH_GUARD_LITSTR(0x7EF5445C77054C67LL, NAMSTR(s_sys_ss77054c67, "seek")) {
        mcp.ci = &c_ArrayIterator::ci_seek;
        mcp.obj = this;
        return true;
      }
      break;
    case 42:
      HASH_GUARD_LITSTR(0x1670096FDE27AF6ALL, NAMSTR(s_sys_ss21d85096, "rewind")) {
        mcp.ci = &c_ArrayIterator::ci_rewind;
        mcp.obj = this;
        return true;
      }
      break;
    case 46:
      HASH_GUARD_LITSTR(0x790B7C44A3442BEELL, NAMSTR(s_sys_ss5cbbd412, "asort")) {
        mcp.ci = &c_ArrayIterator::ci_asort;
        mcp.obj = this;
        return true;
      }
      break;
    case 51:
      HASH_GUARD_LITSTR(0x7DB9D839ACE0DEB3LL, NAMSTR(s_sys_ss531f214d, "natsort")) {
        mcp.ci = &c_ArrayIterator::ci_natsort;
        mcp.obj = this;
        return true;
      }
      break;
    case 56:
      HASH_GUARD_LITSTR(0x3C6D50F3BB8102B8LL, NAMSTR(s_sys_ss447efd48, "next")) {
        mcp.ci = &c_ArrayIterator::ci_next;
        mcp.obj = this;
        return true;
      }
      HASH_GUARD_LITSTR(0x0957F693A48AF738LL, NAMSTR(s_sys_ss5b7508c8, "offsetSet")) {
        mcp.ci = &c_ArrayIterator::ci_offsetset;
        mcp.obj = this;
        return true;
      }
      break;
    case 58:
      HASH_GUARD_LITSTR(0x08329980E6369ABALL, NAMSTR(s_sys_ss19c96546, "offsetUnset")) {
        mcp.ci = &c_ArrayIterator::ci_offsetunset;
        mcp.obj = this;
        return true;
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_get_call_info(mcp, hash);
}
c_ArrayIterator *c_ArrayIterator::create(Variant v_array, Variant v_flags //  = 0LL /* SORT_REGULAR */
) {
  CountableHelper h(this);
  init();
  t___construct(v_array, v_flags);
  return this;
}
ObjectData *c_ArrayIterator::dynCreate(CArrRef params, bool construct /* = true */) {
  init();
  if (construct) {
    CountableHelper h(this);
    int count __attribute__((__unused__)) = params.size();
    if (count < 1 || count > 2) throw_wrong_arguments("ArrayIterator::__construct", count, 1, 2, 2);
    do {
      ArrayData *ad(params.get());
      ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
      CVarRef arg0((ad->getValue(pos)));
      if (count <= 1) {
        (t___construct(arg0));
        break;
      }
      CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
      (t___construct(arg0, arg1));
    } while (false);
  }
  return this;
}
void c_ArrayIterator::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count < 1 || count > 2) throw_wrong_arguments("ArrayIterator::__construct", count, 1, 2, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) {
      (t___construct(arg0));
      break;
    }
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1));
  } while (false);
}
void c_ArrayIterator::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_ArrayIterator::ci___construct;
  mcp.obj = this;
}
void c_ArrayIterator::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  int count __attribute__((__unused__)) = params.size();
  if (count < 1 || count > 2) throw_wrong_arguments("ArrayIterator::__construct", count, 1, 2, 1);
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  if (count <= 1) (t___construct(a0), null);
  else (t___construct(a0, a1), null);
}
struct ObjectStaticCallbacks cw_ArrayIterator = {
  c_ArrayIterator::os_getInit,
  c_ArrayIterator::os_get,
  c_ArrayIterator::os_lval,
  c_ArrayIterator::os_invoke,
  c_ArrayIterator::os_constant,
  c_ArrayIterator::os_get_call_info
};
void c_ArrayIterator::init() {
  m_arr = null;
  m_flags = null;
}
/* SRC: classes/iterator.php line 330 */
void c_ArrayIterator::t___construct(Variant v_array, Variant v_flags //  = 0LL /* SORT_REGULAR */
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::__construct);
  bool oldInCtor = gasInCtor(true);
  m_arr = v_array;
  m_flags = v_flags;
  gasInCtor(oldInCtor);
} /* function */
/* SRC: classes/iterator.php line 346 */
void c_ArrayIterator::t_append(CVarRef v_value) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::append);
  {
    Variant tmp1((v_value));
    m_arr.append((tmp1));
  }
} /* function */
/* SRC: classes/iterator.php line 359 */
bool c_ArrayIterator::t_asort() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::asort);
  {
    const Variant &tmp1((m_arr));
    Variant &tmp1_lv = const_cast<Variant&>(tmp1);
    return x_asort(ref(tmp1_lv), toInt32(m_flags));
  }
} /* function */
/* SRC: classes/iterator.php line 373 */
int c_ArrayIterator::t_count() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::count);
  return x_count(m_arr);
} /* function */
/* SRC: classes/iterator.php line 385 */
Variant c_ArrayIterator::t_current() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::current);
  return x_current(ref(m_arr));
} /* function */
/* SRC: classes/iterator.php line 399 */
Variant c_ArrayIterator::t_getarraycopy() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::getArrayCopy);
  return m_arr;
} /* function */
/* SRC: classes/iterator.php line 412 */
Variant c_ArrayIterator::t_getflags() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::getFlags);
  return m_flags;
} /* function */
/* SRC: classes/iterator.php line 424 */
Variant c_ArrayIterator::t_key() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::key);
  return x_key(ref(m_arr));
} /* function */
/* SRC: classes/iterator.php line 437 */
bool c_ArrayIterator::t_ksort() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::ksort);
  {
    const Variant &tmp1((m_arr));
    Variant &tmp1_lv = const_cast<Variant&>(tmp1);
    return x_ksort(ref(tmp1_lv), toInt32(m_flags));
  }
} /* function */
/* SRC: classes/iterator.php line 451 */
Variant c_ArrayIterator::t_natcasesort() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::natcasesort);
  return x_natcasesort(ref(m_arr));
} /* function */
/* SRC: classes/iterator.php line 465 */
Variant c_ArrayIterator::t_natsort() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::natsort);
  return x_natsort(ref(m_arr));
} /* function */
/* SRC: classes/iterator.php line 477 */
Variant c_ArrayIterator::t_next() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::next);
  return x_next(ref(m_arr));
} /* function */
/* SRC: classes/iterator.php line 492 */
bool c_ArrayIterator::t_offsetexists(CVarRef v_index) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::offsetExists);
  return isset(m_arr, v_index);
} /* function */
/* SRC: classes/iterator.php line 507 */
Variant c_ArrayIterator::t_offsetget(Variant v_index) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::offsetGet);
  return m_arr.rvalAt(v_index, true);
} /* function */
/* SRC: classes/iterator.php line 507 */
Variant &c_ArrayIterator::___offsetget_lval(Variant v_index) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::offsetGet);
  Variant &v = get_system_globals()->__lvalProxy;
  v = t_offsetget(v_index);
  return v;
} /* function */
/* SRC: classes/iterator.php line 523 */
Variant c_ArrayIterator::t_offsetset(CVarRef v_index, CVarRef v_newval) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::offsetSet);
  {
    Variant tmp1((v_newval));
    m_arr.set(v_index, (tmp1));
  }
  return null;
} /* function */
/* SRC: classes/iterator.php line 538 */
Variant c_ArrayIterator::t_offsetunset(CVarRef v_index) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::offsetUnset);
  m_arr.weakRemove(v_index);
  return null;
} /* function */
/* SRC: classes/iterator.php line 550 */
Variant c_ArrayIterator::t_rewind() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::rewind);
  return x_reset(ref(m_arr));
} /* function */
/* SRC: classes/iterator.php line 563 */
void c_ArrayIterator::t_seek(CVarRef v_position) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::seek);
  int64 v_i = 0;

  x_reset(ref(m_arr));
  {
    LOOP_COUNTER(1);
    for (v_i = 0LL; (less(v_i, v_position)); v_i++) {
      LOOP_COUNTER_CHECK(1);
      {
        {
          bool tmp2;
          {
            bool tmp3((toBoolean(x_next(ref(m_arr)))));
            tmp2 = (!(tmp3));
          }
          if (tmp2) {
            {
              break;
            }
          }
        }
      }
    }
  }
} /* function */
/* SRC: classes/iterator.php line 586 */
void c_ArrayIterator::t_setflags(CVarRef v_flags) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::setFlags);
  m_flags = v_flags;
} /* function */
/* SRC: classes/iterator.php line 603 */
bool c_ArrayIterator::t_uasort(CVarRef v_cmp_function) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::uasort);
  {
    const Variant &tmp1((m_arr));
    Variant &tmp1_lv = const_cast<Variant&>(tmp1);
    return x_uasort(ref(tmp1_lv), v_cmp_function);
  }
} /* function */
/* SRC: classes/iterator.php line 620 */
bool c_ArrayIterator::t_uksort(Variant v_cmp_function) {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::uksort);
  {
    const CallInfo *cit1 = NULL;
    void *vt1 = NULL;
    get_call_info_or_fail(cit1, vt1, NAMSTR(s_sys_ss58e4193c, "uksort"));
    return toBoolean((cit1->getFuncFewArgs())(vt1, 1, ref(v_cmp_function), null, null, null, null, null));
  }
} /* function */
/* SRC: classes/iterator.php line 632 */
bool c_ArrayIterator::t_valid() {
  INSTANCE_METHOD_INJECTION_BUILTIN(ArrayIterator, ArrayIterator::valid);
  {
    const Variant &tmp1((x_current(ref(m_arr))));
    return !same(tmp1, false);
  }
} /* function */
/* SRC: classes/iterator.php line 923 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_AppendIterator
Variant c_AppendIterator::os_getInit(CStrRef s) {
  DECLARE_SYSTEM_GLOBALS(g);
  int64 hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_RETURN_NAMSTR(0x60EA38C41F14FF71LL, NAMSTR(s_sys_ss1f14ff71, "iterators"),
                         null, 9);
      break;
    default:
      break;
  }
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_AppendIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_AppendIterator
Variant c_AppendIterator::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_AppendIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_AppendIterator
Variant &c_AppendIterator::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_AppendIterator
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_AppendIterator
void c_AppendIterator::o_getArray(Array &props) const {
  if (isInitialized(m_iterators)) props.add(NAMSTR(s_sys_ss5b908ab0, "\000AppendIterator\000iterators"), m_iterators.isReferenced() ? ref(m_iterators) : m_iterators, true);
  c_ObjectData::o_getArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_AppendIterator
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_AppendIterator
void c_AppendIterator::o_setArray(CArrRef props) {
  props->load(NAMSTR(s_sys_ss5b908ab0, "\000AppendIterator\000iterators"), m_iterators);
  c_ObjectData::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_AppendIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_AppendIterator
Variant * c_AppendIterator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  CStrRef s = context.isNull() ? FrameInjection::GetClassName(false) : context;
  int64 hash = s->hash();
  switch (hash & 1) {
    case 0:
      HASH_GUARD_STRING(0x2E363D51549781C8LL, AppendIterator) { return o_realPropPrivate(prop, flags); }
      break;
    default:
      break;
  }
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_AppendIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_AppendIterator
Variant * c_AppendIterator::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_AppendIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_AppendIterator
Variant * c_AppendIterator::o_realPropPrivate(CStrRef s, int flags) const {
  int64 hash = s->hash();
  switch (hash & 1) {
    case 1:
      HASH_REALPROP_STRING(0x60EA38C41F14FF71LL, "iterators", 9, iterators);
      break;
    default:
      break;
  }
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_AppendIterator
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_AppendIterator
Variant c_AppendIterator::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_AppendIterator
IMPLEMENT_CLASS(AppendIterator)
bool c_AppendIterator::o_instanceof(CStrRef s) const {
  int64 hash = s->hash();
  switch (hash & 7) {
    case 0:
      HASH_INSTANCEOF(0x2E363D51549781C8LL, NAMSTR(s_sys_ss549781c8, "appenditerator"));
      break;
    case 1:
      HASH_INSTANCEOF(0x66679538C5E6F0A1LL, NAMSTR(s_sys_ss3a190f5f, "traversable"));
      break;
    case 5:
      HASH_INSTANCEOF(0x39CA0210AC8E528DLL, NAMSTR(s_sys_ss5371ad73, "outeriterator"));
      break;
    case 6:
      HASH_INSTANCEOF(0x0636A5F84AF9D29ELL, NAMSTR(s_sys_ss4af9d29e, "iterator"));
      break;
    default:
      break;
  }
  return false;
}
ObjectData *c_AppendIterator::cloneImpl() {
  c_AppendIterator *obj = NEW(c_AppendIterator)();
  cloneSet(obj);
  return obj;
}
void c_AppendIterator::cloneSet(c_AppendIterator *clone) {
  clone->m_iterators = m_iterators.isReferenced() ? ref(m_iterators) : m_iterators;
  ObjectData::cloneSet(clone);
}
Variant c_AppendIterator::doCall(Variant v_name, Variant v_arguments, bool fatal) {
  return t___call(v_name, !v_arguments.isNull() ? v_arguments : Variant(Array::Create()));
}
Variant c_AppendIterator::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 2:
      HASH_GUARD_LITSTR(0x4DEE4A472DC69EC2LL, NAMSTR(s_sys_ss2dc69ec2, "append")) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("AppendIterator::append", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_append(a0), null);
      }
      break;
    case 4:
      HASH_GUARD_LITSTR(0x6413CB5154808C44LL, NAMSTR(s_sys_ss54808c44, "valid")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("AppendIterator::valid", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_valid());
      }
      HASH_GUARD_LITSTR(0x3106F858B09C7424LL, NAMSTR(s_sys_ss4f638bdc, "getInnerIterator")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("AppendIterator::getInnerIterator", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getinneriterator());
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x1670096FDE27AF6ALL, NAMSTR(s_sys_ss21d85096, "rewind")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("AppendIterator::rewind", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_rewind(), null);
      }
      break;
    case 12:
      HASH_GUARD_LITSTR(0x5D73364F53CEEB6CLL, NAMSTR(s_sys_ss53ceeb6c, "__call")) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("AppendIterator::__call", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___call(a0, a1));
      }
      break;
    case 17:
      HASH_GUARD_LITSTR(0x56EDB60C824E8C51LL, NAMSTR(s_sys_ss7db173af, "key")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("AppendIterator::key", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_key());
      }
      break;
    case 24:
      HASH_GUARD_LITSTR(0x3C6D50F3BB8102B8LL, NAMSTR(s_sys_ss447efd48, "next")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("AppendIterator::next", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_next(), null);
      }
      break;
    case 28:
      HASH_GUARD_LITSTR(0x5B3A4A72846B21DCLL, NAMSTR(s_sys_ss7b94de24, "current")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("AppendIterator::current", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_current());
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ss229c615f, "__construct")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("AppendIterator::__construct", 0, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(), null);
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_AppendIterator::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  return c_ObjectData::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
CallInfo c_AppendIterator::ci_next((void*)&c_AppendIterator::i_next, (void*)&c_AppendIterator::ifa_next, 0, 0, 0x0000000000000000LL);
CallInfo c_AppendIterator::ci_key((void*)&c_AppendIterator::i_key, (void*)&c_AppendIterator::ifa_key, 0, 0, 0x0000000000000000LL);
CallInfo c_AppendIterator::ci_valid((void*)&c_AppendIterator::i_valid, (void*)&c_AppendIterator::ifa_valid, 0, 0, 0x0000000000000000LL);
CallInfo c_AppendIterator::ci_getinneriterator((void*)&c_AppendIterator::i_getinneriterator, (void*)&c_AppendIterator::ifa_getinneriterator, 0, 0, 0x0000000000000000LL);
CallInfo c_AppendIterator::ci_append((void*)&c_AppendIterator::i_append, (void*)&c_AppendIterator::ifa_append, 1, 0, 0x0000000000000000LL);
CallInfo c_AppendIterator::ci___construct((void*)&c_AppendIterator::i___construct, (void*)&c_AppendIterator::ifa___construct, 0, 0, 0x0000000000000000LL);
CallInfo c_AppendIterator::ci_current((void*)&c_AppendIterator::i_current, (void*)&c_AppendIterator::ifa_current, 0, 0, 0x0000000000000000LL);
CallInfo c_AppendIterator::ci___call((void*)&c_AppendIterator::i___call, (void*)&c_AppendIterator::ifa___call, 2, 0, 0x0000000000000000LL);
CallInfo c_AppendIterator::ci_rewind((void*)&c_AppendIterator::i_rewind, (void*)&c_AppendIterator::ifa_rewind, 0, 0, 0x0000000000000000LL);
Variant c_AppendIterator::i_next(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("AppendIterator::next", 0, 1);
  return (self->t_next(), null);
}
Variant c_AppendIterator::i_key(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("AppendIterator::key", 0, 1);
  return (self->t_key());
}
Variant c_AppendIterator::i_valid(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("AppendIterator::valid", 0, 1);
  return (self->t_valid());
}
Variant c_AppendIterator::i_getinneriterator(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("AppendIterator::getInnerIterator", 0, 1);
  return (self->t_getinneriterator());
}
Variant c_AppendIterator::i_append(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("AppendIterator::append", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_append(arg0), null);
  }
}
Variant c_AppendIterator::i___construct(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("AppendIterator::__construct", 0, 2);
  return (self->t___construct(), null);
}
Variant c_AppendIterator::i_current(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("AppendIterator::current", 0, 1);
  return (self->t_current());
}
Variant c_AppendIterator::i___call(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 2) return throw_wrong_arguments("AppendIterator::__call", count, 2, 2, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___call(arg0, arg1));
  }
}
Variant c_AppendIterator::i_rewind(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("AppendIterator::rewind", 0, 1);
  return (self->t_rewind(), null);
}
Variant c_AppendIterator::ifa_next(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("AppendIterator::next", 0, 1);
  return (self->t_next(), null);
}
Variant c_AppendIterator::ifa_key(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("AppendIterator::key", 0, 1);
  return (self->t_key());
}
Variant c_AppendIterator::ifa_valid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("AppendIterator::valid", 0, 1);
  return (self->t_valid());
}
Variant c_AppendIterator::ifa_getinneriterator(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("AppendIterator::getInnerIterator", 0, 1);
  return (self->t_getinneriterator());
}
Variant c_AppendIterator::ifa_append(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("AppendIterator::append", count, 1, 1, 1);
  return (self->t_append(a0), null);
}
Variant c_AppendIterator::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("AppendIterator::__construct", 0, 2);
  return (self->t___construct(), null);
}
Variant c_AppendIterator::ifa_current(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("AppendIterator::current", 0, 1);
  return (self->t_current());
}
Variant c_AppendIterator::ifa___call(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 2) return throw_wrong_arguments("AppendIterator::__call", count, 2, 2, 1);
  return (self->t___call(a0, a1));
}
Variant c_AppendIterator::ifa_rewind(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_AppendIterator *self = NULL;
  p_AppendIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_AppendIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_AppendIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("AppendIterator::rewind", 0, 1);
  return (self->t_rewind(), null);
}
bool c_AppendIterator::os_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 31) {
    case 2:
      HASH_GUARD_LITSTR(0x4DEE4A472DC69EC2LL, NAMSTR(s_sys_ss2dc69ec2, "append")) {
        mcp.ci = &c_AppendIterator::ci_append;
        return true;
      }
      break;
    case 4:
      HASH_GUARD_LITSTR(0x6413CB5154808C44LL, NAMSTR(s_sys_ss54808c44, "valid")) {
        mcp.ci = &c_AppendIterator::ci_valid;
        return true;
      }
      HASH_GUARD_LITSTR(0x3106F858B09C7424LL, NAMSTR(s_sys_ss4f638bdc, "getInnerIterator")) {
        mcp.ci = &c_AppendIterator::ci_getinneriterator;
        return true;
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x1670096FDE27AF6ALL, NAMSTR(s_sys_ss21d85096, "rewind")) {
        mcp.ci = &c_AppendIterator::ci_rewind;
        return true;
      }
      break;
    case 12:
      HASH_GUARD_LITSTR(0x5D73364F53CEEB6CLL, NAMSTR(s_sys_ss53ceeb6c, "__call")) {
        mcp.ci = &c_AppendIterator::ci___call;
        return true;
      }
      break;
    case 17:
      HASH_GUARD_LITSTR(0x56EDB60C824E8C51LL, NAMSTR(s_sys_ss7db173af, "key")) {
        mcp.ci = &c_AppendIterator::ci_key;
        return true;
      }
      break;
    case 24:
      HASH_GUARD_LITSTR(0x3C6D50F3BB8102B8LL, NAMSTR(s_sys_ss447efd48, "next")) {
        mcp.ci = &c_AppendIterator::ci_next;
        return true;
      }
      break;
    case 28:
      HASH_GUARD_LITSTR(0x5B3A4A72846B21DCLL, NAMSTR(s_sys_ss7b94de24, "current")) {
        mcp.ci = &c_AppendIterator::ci_current;
        return true;
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ss229c615f, "__construct")) {
        mcp.ci = &c_AppendIterator::ci___construct;
        return true;
      }
      break;
    default:
      break;
  }
  return c_ObjectData::os_get_call_info(mcp, hash);
}
bool c_AppendIterator::o_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 31) {
    case 2:
      HASH_GUARD_LITSTR(0x4DEE4A472DC69EC2LL, NAMSTR(s_sys_ss2dc69ec2, "append")) {
        mcp.ci = &c_AppendIterator::ci_append;
        mcp.obj = this;
        return true;
      }
      break;
    case 4:
      HASH_GUARD_LITSTR(0x6413CB5154808C44LL, NAMSTR(s_sys_ss54808c44, "valid")) {
        mcp.ci = &c_AppendIterator::ci_valid;
        mcp.obj = this;
        return true;
      }
      HASH_GUARD_LITSTR(0x3106F858B09C7424LL, NAMSTR(s_sys_ss4f638bdc, "getInnerIterator")) {
        mcp.ci = &c_AppendIterator::ci_getinneriterator;
        mcp.obj = this;
        return true;
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x1670096FDE27AF6ALL, NAMSTR(s_sys_ss21d85096, "rewind")) {
        mcp.ci = &c_AppendIterator::ci_rewind;
        mcp.obj = this;
        return true;
      }
      break;
    case 12:
      HASH_GUARD_LITSTR(0x5D73364F53CEEB6CLL, NAMSTR(s_sys_ss53ceeb6c, "__call")) {
        mcp.ci = &c_AppendIterator::ci___call;
        mcp.obj = this;
        return true;
      }
      break;
    case 17:
      HASH_GUARD_LITSTR(0x56EDB60C824E8C51LL, NAMSTR(s_sys_ss7db173af, "key")) {
        mcp.ci = &c_AppendIterator::ci_key;
        mcp.obj = this;
        return true;
      }
      break;
    case 24:
      HASH_GUARD_LITSTR(0x3C6D50F3BB8102B8LL, NAMSTR(s_sys_ss447efd48, "next")) {
        mcp.ci = &c_AppendIterator::ci_next;
        mcp.obj = this;
        return true;
      }
      break;
    case 28:
      HASH_GUARD_LITSTR(0x5B3A4A72846B21DCLL, NAMSTR(s_sys_ss7b94de24, "current")) {
        mcp.ci = &c_AppendIterator::ci_current;
        mcp.obj = this;
        return true;
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ss229c615f, "__construct")) {
        mcp.ci = &c_AppendIterator::ci___construct;
        mcp.obj = this;
        return true;
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_get_call_info(mcp, hash);
}
c_AppendIterator *c_AppendIterator::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
ObjectData *c_AppendIterator::dynCreate(CArrRef params, bool construct /* = true */) {
  init();
  if (construct) {
    CountableHelper h(this);
    int count __attribute__((__unused__)) = params.size();
    if (count > 0) throw_toomany_arguments("AppendIterator::__construct", 0, 2);
    (t___construct());
  }
  return this;
}
void c_AppendIterator::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count > 0) throw_toomany_arguments("AppendIterator::__construct", 0, 2);
  (t___construct());
}
void c_AppendIterator::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_AppendIterator::ci___construct;
  mcp.obj = this;
}
void c_AppendIterator::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  int count __attribute__((__unused__)) = params.size();
  if (count > 0) throw_toomany_arguments("AppendIterator::__construct", 0, 1);
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  (t___construct(), null);
}
struct ObjectStaticCallbacks cw_AppendIterator = {
  c_AppendIterator::os_getInit,
  c_AppendIterator::os_get,
  c_AppendIterator::os_lval,
  c_AppendIterator::os_invoke,
  c_AppendIterator::os_constant,
  c_AppendIterator::os_get_call_info
};
void c_AppendIterator::init() {
  m_iterators = null;
}
/* SRC: classes/iterator.php line 926 */
void c_AppendIterator::t___construct() {
  INSTANCE_METHOD_INJECTION_BUILTIN(AppendIterator, AppendIterator::__construct);
  bool oldInCtor = gasInCtor(true);
  {
    p_ArrayIterator tmp1((p_ArrayIterator((NEWOBJ(c_ArrayIterator)())->create(s_sys_sa00000000))));
    m_iterators = tmp1;
  }
  gasInCtor(oldInCtor);
} /* function */
/* SRC: classes/iterator.php line 941 */
void c_AppendIterator::t_append(CVarRef v_it) {
  INSTANCE_METHOD_INJECTION_BUILTIN(AppendIterator, AppendIterator::append);
  if(!v_it.instanceof(NAMSTR(s_sys_ss4af9d29e, "iterator")))
    throw_unexpected_argument_type(0,"append","iterator",v_it);
  {
    MethodCallPackage mcp2;
    mcp2.methodCall((m_iterators), NAMSTR(s_sys_ss2dc69ec2, "append"), 0x4DEE4A472DC69EC2LL);
    const CallInfo *cit2  __attribute__((__unused__)) = mcp2.ci;
    (mcp2.bindClass(info)->getMethFewArgs())(mcp2, 1, v_it, null_variant, null_variant, null_variant, null_variant, null_variant);
  }
} /* function */
/* SRC: classes/iterator.php line 955 */
Variant c_AppendIterator::t_getinneriterator() {
  INSTANCE_METHOD_INJECTION_BUILTIN(AppendIterator, AppendIterator::getInnerIterator);
  {
    MethodCallPackage mcp3;
    mcp3.methodCall((m_iterators), NAMSTR(s_sys_ss7b94de24, "current"), 0x5B3A4A72846B21DCLL);
    const CallInfo *cit3  __attribute__((__unused__)) = mcp3.ci;
    return wrap_variant((mcp3.bindClass(info)->getMethFewArgs())(mcp3, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant));
  }
} /* function */
/* SRC: classes/iterator.php line 969 */
void c_AppendIterator::t_rewind() {
  INSTANCE_METHOD_INJECTION_BUILTIN(AppendIterator, AppendIterator::rewind);
  {
    MethodCallPackage mcp4;
    mcp4.methodCall((m_iterators), NAMSTR(s_sys_ss21d85096, "rewind"), 0x1670096FDE27AF6ALL);
    const CallInfo *cit4  __attribute__((__unused__)) = mcp4.ci;
    (mcp4.bindClass(info)->getMethFewArgs())(mcp4, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant);
  }
  {
    bool tmp1;
    {
      MethodCallPackage mcp5;
      mcp5.methodCall((m_iterators), NAMSTR(s_sys_ss54808c44, "valid"), 0x6413CB5154808C44LL);
      const CallInfo *cit5  __attribute__((__unused__)) = mcp5.ci;
      tmp1 = (toBoolean((mcp5.bindClass(info)->getMethFewArgs())(mcp5, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant)));
    }
    if (tmp1) {
      {
        {
          MethodCallPackage mcp7;
          mcp7.methodCall((GET_THIS()), NAMSTR(s_sys_ss4f638bdc, "getInnerIterator"), 0x3106F858B09C7424LL);
          const CallInfo *cit7  __attribute__((__unused__)) = mcp7.ci;
          MethodCallPackage mcp6;
          mcp6.methodCall(((mcp7.bindClass(info)->getMethFewArgs())(mcp7, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant)), NAMSTR(s_sys_ss21d85096, "rewind"), 0x1670096FDE27AF6ALL);
          const CallInfo *cit6  __attribute__((__unused__)) = mcp6.ci;
          (mcp6.bindClass(info)->getMethFewArgs())(mcp6, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant);
        }
      }
    }
  }
} /* function */
/* SRC: classes/iterator.php line 985 */
bool c_AppendIterator::t_valid() {
  INSTANCE_METHOD_INJECTION_BUILTIN(AppendIterator, AppendIterator::valid);
  {
    MethodCallPackage mcp8;
    mcp8.methodCall((m_iterators), NAMSTR(s_sys_ss54808c44, "valid"), 0x6413CB5154808C44LL);
    const CallInfo *cit8  __attribute__((__unused__)) = mcp8.ci;
    bool tmp1 = (toBoolean((mcp8.bindClass(info)->getMethFewArgs())(mcp8, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant)));
    if (tmp1) {
      MethodCallPackage mcp10;
      mcp10.methodCall((GET_THIS()), NAMSTR(s_sys_ss4f638bdc, "getInnerIterator"), 0x3106F858B09C7424LL);
      const CallInfo *cit10  __attribute__((__unused__)) = mcp10.ci;
      MethodCallPackage mcp9;
      mcp9.methodCall(((mcp10.bindClass(info)->getMethFewArgs())(mcp10, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant)), NAMSTR(s_sys_ss54808c44, "valid"), 0x6413CB5154808C44LL);
      const CallInfo *cit9  __attribute__((__unused__)) = mcp9.ci;
      tmp1 = (toBoolean((mcp9.bindClass(info)->getMethFewArgs())(mcp9, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant)));
    }
    return tmp1;
  }
} /* function */
/* SRC: classes/iterator.php line 998 */
Variant c_AppendIterator::t_current() {
  INSTANCE_METHOD_INJECTION_BUILTIN(AppendIterator, AppendIterator::current);
  {
    MethodCallPackage mcp11;
    mcp11.methodCall((m_iterators), NAMSTR(s_sys_ss54808c44, "valid"), 0x6413CB5154808C44LL);
    const CallInfo *cit11  __attribute__((__unused__)) = mcp11.ci;
    Variant tmp1;
    if (toBoolean((mcp11.bindClass(info)->getMethFewArgs())(mcp11, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant))) {
      MethodCallPackage mcp13;
      mcp13.methodCall((GET_THIS()), NAMSTR(s_sys_ss4f638bdc, "getInnerIterator"), 0x3106F858B09C7424LL);
      const CallInfo *cit13  __attribute__((__unused__)) = mcp13.ci;
      MethodCallPackage mcp12;
      mcp12.methodCall(((mcp13.bindClass(info)->getMethFewArgs())(mcp13, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant)), NAMSTR(s_sys_ss7b94de24, "current"), 0x5B3A4A72846B21DCLL);
      const CallInfo *cit12  __attribute__((__unused__)) = mcp12.ci;
      tmp1 = ((mcp12.bindClass(info)->getMethFewArgs())(mcp12, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant));
    } else {
      tmp1 = (null);
    }
    return tmp1;
  }
} /* function */
/* SRC: classes/iterator.php line 1016 */
Variant c_AppendIterator::t_key() {
  INSTANCE_METHOD_INJECTION_BUILTIN(AppendIterator, AppendIterator::key);
  {
    MethodCallPackage mcp14;
    mcp14.methodCall((m_iterators), NAMSTR(s_sys_ss54808c44, "valid"), 0x6413CB5154808C44LL);
    const CallInfo *cit14  __attribute__((__unused__)) = mcp14.ci;
    Variant tmp1;
    if (toBoolean((mcp14.bindClass(info)->getMethFewArgs())(mcp14, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant))) {
      MethodCallPackage mcp16;
      mcp16.methodCall((GET_THIS()), NAMSTR(s_sys_ss4f638bdc, "getInnerIterator"), 0x3106F858B09C7424LL);
      const CallInfo *cit16  __attribute__((__unused__)) = mcp16.ci;
      MethodCallPackage mcp15;
      mcp15.methodCall(((mcp16.bindClass(info)->getMethFewArgs())(mcp16, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant)), NAMSTR(s_sys_ss7db173af, "key"), 0x56EDB60C824E8C51LL);
      const CallInfo *cit15  __attribute__((__unused__)) = mcp15.ci;
      tmp1 = ((mcp15.bindClass(info)->getMethFewArgs())(mcp15, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant));
    } else {
      tmp1 = (null);
    }
    return tmp1;
  }
} /* function */
/* SRC: classes/iterator.php line 1030 */
void c_AppendIterator::t_next() {
  INSTANCE_METHOD_INJECTION_BUILTIN(AppendIterator, AppendIterator::next);
  {
    bool tmp1;
    {
      MethodCallPackage mcp17;
      mcp17.methodCall((m_iterators), NAMSTR(s_sys_ss54808c44, "valid"), 0x6413CB5154808C44LL);
      const CallInfo *cit17  __attribute__((__unused__)) = mcp17.ci;
      tmp1 = (!(toBoolean((mcp17.bindClass(info)->getMethFewArgs())(mcp17, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant))));
    }
    if (tmp1) {
      {
        return;
      }
    }
  }
  {
    MethodCallPackage mcp19;
    mcp19.methodCall((GET_THIS()), NAMSTR(s_sys_ss4f638bdc, "getInnerIterator"), 0x3106F858B09C7424LL);
    const CallInfo *cit19  __attribute__((__unused__)) = mcp19.ci;
    MethodCallPackage mcp18;
    mcp18.methodCall(((mcp19.bindClass(info)->getMethFewArgs())(mcp19, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant)), NAMSTR(s_sys_ss447efd48, "next"), 0x3C6D50F3BB8102B8LL);
    const CallInfo *cit18  __attribute__((__unused__)) = mcp18.ci;
    (mcp18.bindClass(info)->getMethFewArgs())(mcp18, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant);
  }
  {
    bool tmp2;
    {
      MethodCallPackage mcp21;
      mcp21.methodCall((GET_THIS()), NAMSTR(s_sys_ss4f638bdc, "getInnerIterator"), 0x3106F858B09C7424LL);
      const CallInfo *cit21  __attribute__((__unused__)) = mcp21.ci;
      MethodCallPackage mcp20;
      mcp20.methodCall(((mcp21.bindClass(info)->getMethFewArgs())(mcp21, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant)), NAMSTR(s_sys_ss54808c44, "valid"), 0x6413CB5154808C44LL);
      const CallInfo *cit20  __attribute__((__unused__)) = mcp20.ci;
      tmp2 = (toBoolean((mcp20.bindClass(info)->getMethFewArgs())(mcp20, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant)));
    }
    if (tmp2) {
      {
        return;
      }
    }
  }
  {
    MethodCallPackage mcp22;
    mcp22.methodCall((m_iterators), NAMSTR(s_sys_ss447efd48, "next"), 0x3C6D50F3BB8102B8LL);
    const CallInfo *cit22  __attribute__((__unused__)) = mcp22.ci;
    (mcp22.bindClass(info)->getMethFewArgs())(mcp22, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant);
  }
  LOOP_COUNTER(3);
  {
    while (true) {
      {
        MethodCallPackage mcp23;
        mcp23.methodCall((m_iterators), NAMSTR(s_sys_ss54808c44, "valid"), 0x6413CB5154808C44LL);
        const CallInfo *cit23  __attribute__((__unused__)) = mcp23.ci;
        if (!(toBoolean((mcp23.bindClass(info)->getMethFewArgs())(mcp23, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant)))) break;
      }
      LOOP_COUNTER_CHECK(3);
      {
        {
          MethodCallPackage mcp25;
          mcp25.methodCall((GET_THIS()), NAMSTR(s_sys_ss4f638bdc, "getInnerIterator"), 0x3106F858B09C7424LL);
          const CallInfo *cit25  __attribute__((__unused__)) = mcp25.ci;
          MethodCallPackage mcp24;
          mcp24.methodCall(((mcp25.bindClass(info)->getMethFewArgs())(mcp25, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant)), NAMSTR(s_sys_ss21d85096, "rewind"), 0x1670096FDE27AF6ALL);
          const CallInfo *cit24  __attribute__((__unused__)) = mcp24.ci;
          (mcp24.bindClass(info)->getMethFewArgs())(mcp24, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant);
        }
        {
          bool tmp4;
          {
            MethodCallPackage mcp27;
            mcp27.methodCall((GET_THIS()), NAMSTR(s_sys_ss4f638bdc, "getInnerIterator"), 0x3106F858B09C7424LL);
            const CallInfo *cit27  __attribute__((__unused__)) = mcp27.ci;
            MethodCallPackage mcp26;
            mcp26.methodCall(((mcp27.bindClass(info)->getMethFewArgs())(mcp27, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant)), NAMSTR(s_sys_ss54808c44, "valid"), 0x6413CB5154808C44LL);
            const CallInfo *cit26  __attribute__((__unused__)) = mcp26.ci;
            tmp4 = (toBoolean((mcp26.bindClass(info)->getMethFewArgs())(mcp26, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant)));
          }
          if (tmp4) {
            {
              return;
            }
          }
        }
        {
          MethodCallPackage mcp28;
          mcp28.methodCall((m_iterators), NAMSTR(s_sys_ss447efd48, "next"), 0x3C6D50F3BB8102B8LL);
          const CallInfo *cit28  __attribute__((__unused__)) = mcp28.ci;
          (mcp28.bindClass(info)->getMethFewArgs())(mcp28, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant);
        }
      }
    }
  }
} /* function */
/* SRC: classes/iterator.php line 1048 */
Variant c_AppendIterator::t___call(Variant v_func, Variant v_params) {
  INSTANCE_METHOD_INJECTION_BUILTIN(AppendIterator, AppendIterator::__call);
  {
    ArrayInit tmp1(2, true);
    MethodCallPackage mcp29;
    mcp29.methodCall((GET_THIS()), NAMSTR(s_sys_ss4f638bdc, "getInnerIterator"), 0x3106F858B09C7424LL);
    const CallInfo *cit29  __attribute__((__unused__)) = mcp29.ci;
    const Variant &tmp2(((mcp29.bindClass(info)->getMethFewArgs())(mcp29, 0, null_variant, null_variant, null_variant, null_variant, null_variant, null_variant)));
    tmp1.set(tmp2);
    tmp1.set(v_func);
    const Array &tmp3((Array(tmp1)));
    return x_call_user_func_array(tmp3, toArray(v_params));
  }
} /* function */
/* SRC: classes/iterator.php line 755 */
const int64 q_RecursiveDirectoryIterator_CURRENT_AS_SELF = 0LL;
const int64 q_RecursiveDirectoryIterator_CURRENT_AS_FILEINFO = 16LL;
const int64 q_RecursiveDirectoryIterator_CURRENT_AS_PATHNAME = 32LL;
const int64 q_RecursiveDirectoryIterator_KEY_AS_PATHNAME = 0LL;
const int64 q_RecursiveDirectoryIterator_KEY_AS_FILENAME = 256LL;
const int64 q_RecursiveDirectoryIterator_NEW_CURRENT_AND_KEY = 272LL;
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_RecursiveDirectoryIterator
Variant c_RecursiveDirectoryIterator::os_getInit(CStrRef s) {
  return c_DirectoryIterator::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_RecursiveDirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_RecursiveDirectoryIterator
Variant c_RecursiveDirectoryIterator::os_get(CStrRef s) {
  return c_DirectoryIterator::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_RecursiveDirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_RecursiveDirectoryIterator
Variant &c_RecursiveDirectoryIterator::os_lval(CStrRef s) {
  return c_DirectoryIterator::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_RecursiveDirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_RecursiveDirectoryIterator
void c_RecursiveDirectoryIterator::o_getArray(Array &props) const {
  c_DirectoryIterator::o_getArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_RecursiveDirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_RecursiveDirectoryIterator
void c_RecursiveDirectoryIterator::o_setArray(CArrRef props) {
  c_DirectoryIterator::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_RecursiveDirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_RecursiveDirectoryIterator
Variant * c_RecursiveDirectoryIterator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_RecursiveDirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_RecursiveDirectoryIterator
Variant * c_RecursiveDirectoryIterator::o_realPropPublic(CStrRef s, int flags) const {
  return c_DirectoryIterator::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_RecursiveDirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_RecursiveDirectoryIterator
Variant * c_RecursiveDirectoryIterator::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_RecursiveDirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_RecursiveDirectoryIterator
Variant c_RecursiveDirectoryIterator::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 15) {
    case 0:
      HASH_RETURN(0x4A34A9DA11ED8F50LL, q_RecursiveDirectoryIterator_KEY_AS_FILENAME, "KEY_AS_FILENAME");
      break;
    case 1:
      HASH_RETURN(0x6AA4D24FB118FCF1LL, q_RecursiveDirectoryIterator_KEY_AS_PATHNAME, "KEY_AS_PATHNAME");
      break;
    case 4:
      HASH_RETURN(0x0F0DCA1A52157D84LL, q_RecursiveDirectoryIterator_NEW_CURRENT_AND_KEY, "NEW_CURRENT_AND_KEY");
      break;
    case 5:
      HASH_RETURN(0x29191B08277C8E85LL, q_RecursiveDirectoryIterator_CURRENT_AS_SELF, "CURRENT_AS_SELF");
      break;
    case 6:
      HASH_RETURN(0x5C823ED8BD51E7F6LL, q_RecursiveDirectoryIterator_CURRENT_AS_FILEINFO, "CURRENT_AS_FILEINFO");
      break;
    case 15:
      HASH_RETURN(0x2D581F4C45121E5FLL, q_RecursiveDirectoryIterator_CURRENT_AS_PATHNAME, "CURRENT_AS_PATHNAME");
      break;
    default:
      break;
  }
  return c_DirectoryIterator::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_RecursiveDirectoryIterator
IMPLEMENT_CLASS(RecursiveDirectoryIterator)
bool c_RecursiveDirectoryIterator::o_instanceof(CStrRef s) const {
  int64 hash = s->hash();
  switch (hash & 15) {
    case 1:
      HASH_INSTANCEOF(0x66679538C5E6F0A1LL, NAMSTR(s_sys_ss3a190f5f, "traversable"));
      break;
    case 3:
      HASH_INSTANCEOF(0x191964700AF036D3LL, NAMSTR(s_sys_ss0af036d3, "recursiveiterator"));
      HASH_INSTANCEOF(0x60C47E7FE145DC43LL, NAMSTR(s_sys_ss1eba23bd, "seekableiterator"));
      break;
    case 7:
      HASH_INSTANCEOF(0x71089C29FE923FA7LL, NAMSTR(s_sys_ss016dc059, "splfileinfo"));
      break;
    case 8:
      HASH_INSTANCEOF(0x464D3427431A6ED8LL, NAMSTR(s_sys_ss431a6ed8, "recursivedirectoryiterator"));
      break;
    case 14:
      HASH_INSTANCEOF(0x7754323897E8A15ELL, NAMSTR(s_sys_ss68175ea2, "directoryiterator"));
      HASH_INSTANCEOF(0x0636A5F84AF9D29ELL, NAMSTR(s_sys_ss4af9d29e, "iterator"));
      break;
    default:
      break;
  }
  return false;
}
ObjectData *c_RecursiveDirectoryIterator::cloneImpl() {
  c_RecursiveDirectoryIterator *obj = NEW(c_RecursiveDirectoryIterator)();
  cloneSet(obj);
  return obj;
}
void c_RecursiveDirectoryIterator::cloneSet(c_RecursiveDirectoryIterator *clone) {
  c_DirectoryIterator::cloneSet(clone);
}
Variant c_RecursiveDirectoryIterator::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 4:
      HASH_GUARD_LITSTR(0x6413CB5154808C44LL, NAMSTR(s_sys_ss54808c44, "valid")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::valid", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_valid());
      }
      break;
    case 7:
      HASH_GUARD_LITSTR(0x7EF5445C77054C67LL, NAMSTR(s_sys_ss77054c67, "seek")) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("RecursiveDirectoryIterator::seek", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_seek(a0));
      }
      break;
    case 9:
      HASH_GUARD_LITSTR(0x430BA7B88ED3A809LL, NAMSTR(s_sys_ss712c57f7, "getSubPathname")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::getSubPathname", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getsubpathname());
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x1670096FDE27AF6ALL, NAMSTR(s_sys_ss21d85096, "rewind")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::rewind", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_rewind());
      }
      break;
    case 15:
      HASH_GUARD_LITSTR(0x732EC1BDA8EC520FLL, NAMSTR(s_sys_ss5713adf1, "getChildren")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::getChildren", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getchildren());
      }
      break;
    case 17:
      HASH_GUARD_LITSTR(0x56EDB60C824E8C51LL, NAMSTR(s_sys_ss7db173af, "key")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::key", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_key());
      }
      break;
    case 19:
      HASH_GUARD_LITSTR(0x642C2D2994B34A13LL, NAMSTR(s_sys_ss6b4cb5ed, "__toString")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 21:
      HASH_GUARD_LITSTR(0x40044334DA397C15LL, NAMSTR(s_sys_ss25c683eb, "hasChildren")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::hasChildren", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_haschildren());
      }
      break;
    case 24:
      HASH_GUARD_LITSTR(0x3C6D50F3BB8102B8LL, NAMSTR(s_sys_ss447efd48, "next")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::next", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_next());
      }
      break;
    case 27:
      HASH_GUARD_LITSTR(0x7CF26A0E76B5E27BLL, NAMSTR(s_sys_ss76b5e27b, "getSubPath")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::getSubPath", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getsubpath());
      }
      break;
    case 28:
      HASH_GUARD_LITSTR(0x5B3A4A72846B21DCLL, NAMSTR(s_sys_ss7b94de24, "current")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::current", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_current());
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ss229c615f, "__construct")) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count < 1 || count > 2) return throw_wrong_arguments("RecursiveDirectoryIterator::__construct", count, 1, 2, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 1) return (t___construct(a0), null);
        else return (t___construct(a0, a1), null);
      }
      break;
    default:
      break;
  }
  return c_DirectoryIterator::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_RecursiveDirectoryIterator::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  return c_DirectoryIterator::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
CallInfo c_RecursiveDirectoryIterator::ci_next((void*)&c_RecursiveDirectoryIterator::i_next, (void*)&c_RecursiveDirectoryIterator::ifa_next, 0, 0, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_key((void*)&c_RecursiveDirectoryIterator::i_key, (void*)&c_RecursiveDirectoryIterator::ifa_key, 0, 0, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_valid((void*)&c_RecursiveDirectoryIterator::i_valid, (void*)&c_RecursiveDirectoryIterator::ifa_valid, 0, 0, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci___tostring((void*)&c_RecursiveDirectoryIterator::i___tostring, (void*)&c_RecursiveDirectoryIterator::ifa___tostring, 0, 0, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_getsubpathname((void*)&c_RecursiveDirectoryIterator::i_getsubpathname, (void*)&c_RecursiveDirectoryIterator::ifa_getsubpathname, 0, 0, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_getsubpath((void*)&c_RecursiveDirectoryIterator::i_getsubpath, (void*)&c_RecursiveDirectoryIterator::ifa_getsubpath, 0, 0, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci___construct((void*)&c_RecursiveDirectoryIterator::i___construct, (void*)&c_RecursiveDirectoryIterator::ifa___construct, 2, 0, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_haschildren((void*)&c_RecursiveDirectoryIterator::i_haschildren, (void*)&c_RecursiveDirectoryIterator::ifa_haschildren, 0, 0, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_seek((void*)&c_RecursiveDirectoryIterator::i_seek, (void*)&c_RecursiveDirectoryIterator::ifa_seek, 1, 0, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_getchildren((void*)&c_RecursiveDirectoryIterator::i_getchildren, (void*)&c_RecursiveDirectoryIterator::ifa_getchildren, 0, 0, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_current((void*)&c_RecursiveDirectoryIterator::i_current, (void*)&c_RecursiveDirectoryIterator::ifa_current, 0, 0, 0x0000000000000000LL);
CallInfo c_RecursiveDirectoryIterator::ci_rewind((void*)&c_RecursiveDirectoryIterator::i_rewind, (void*)&c_RecursiveDirectoryIterator::ifa_rewind, 0, 0, 0x0000000000000000LL);
Variant c_RecursiveDirectoryIterator::i_next(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::next", 0, 1);
  return (self->t_next());
}
Variant c_RecursiveDirectoryIterator::i_key(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::key", 0, 1);
  return (self->t_key());
}
Variant c_RecursiveDirectoryIterator::i_valid(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::valid", 0, 1);
  return (self->t_valid());
}
Variant c_RecursiveDirectoryIterator::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_RecursiveDirectoryIterator::i_getsubpathname(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::getSubPathname", 0, 1);
  return (self->t_getsubpathname());
}
Variant c_RecursiveDirectoryIterator::i_getsubpath(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::getSubPath", 0, 1);
  return (self->t_getsubpath());
}
Variant c_RecursiveDirectoryIterator::i___construct(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count < 1 || count > 2) return throw_wrong_arguments("RecursiveDirectoryIterator::__construct", count, 1, 2, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t___construct(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1), null);
  }
}
Variant c_RecursiveDirectoryIterator::i_haschildren(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::hasChildren", 0, 1);
  return (self->t_haschildren());
}
Variant c_RecursiveDirectoryIterator::i_seek(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("RecursiveDirectoryIterator::seek", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_seek(arg0));
  }
}
Variant c_RecursiveDirectoryIterator::i_getchildren(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::getChildren", 0, 1);
  return (self->t_getchildren());
}
Variant c_RecursiveDirectoryIterator::i_current(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::current", 0, 1);
  return (self->t_current());
}
Variant c_RecursiveDirectoryIterator::i_rewind(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::rewind", 0, 1);
  return (self->t_rewind());
}
Variant c_RecursiveDirectoryIterator::ifa_next(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::next", 0, 1);
  return (self->t_next());
}
Variant c_RecursiveDirectoryIterator::ifa_key(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::key", 0, 1);
  return (self->t_key());
}
Variant c_RecursiveDirectoryIterator::ifa_valid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::valid", 0, 1);
  return (self->t_valid());
}
Variant c_RecursiveDirectoryIterator::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_RecursiveDirectoryIterator::ifa_getsubpathname(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::getSubPathname", 0, 1);
  return (self->t_getsubpathname());
}
Variant c_RecursiveDirectoryIterator::ifa_getsubpath(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::getSubPath", 0, 1);
  return (self->t_getsubpath());
}
Variant c_RecursiveDirectoryIterator::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count < 1 || count > 2) return throw_wrong_arguments("RecursiveDirectoryIterator::__construct", count, 1, 2, 2);
  if (count <= 1) return (self->t___construct(a0), null);
  return (self->t___construct(a0, a1), null);
}
Variant c_RecursiveDirectoryIterator::ifa_haschildren(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::hasChildren", 0, 1);
  return (self->t_haschildren());
}
Variant c_RecursiveDirectoryIterator::ifa_seek(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("RecursiveDirectoryIterator::seek", count, 1, 1, 1);
  return (self->t_seek(a0));
}
Variant c_RecursiveDirectoryIterator::ifa_getchildren(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::getChildren", 0, 1);
  return (self->t_getchildren());
}
Variant c_RecursiveDirectoryIterator::ifa_current(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::current", 0, 1);
  return (self->t_current());
}
Variant c_RecursiveDirectoryIterator::ifa_rewind(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveDirectoryIterator *self = NULL;
  p_RecursiveDirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveDirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveDirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveDirectoryIterator::rewind", 0, 1);
  return (self->t_rewind());
}
bool c_RecursiveDirectoryIterator::os_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 31) {
    case 4:
      HASH_GUARD_LITSTR(0x6413CB5154808C44LL, NAMSTR(s_sys_ss54808c44, "valid")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_valid;
        return true;
      }
      break;
    case 7:
      HASH_GUARD_LITSTR(0x7EF5445C77054C67LL, NAMSTR(s_sys_ss77054c67, "seek")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_seek;
        return true;
      }
      break;
    case 9:
      HASH_GUARD_LITSTR(0x430BA7B88ED3A809LL, NAMSTR(s_sys_ss712c57f7, "getSubPathname")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_getsubpathname;
        return true;
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x1670096FDE27AF6ALL, NAMSTR(s_sys_ss21d85096, "rewind")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_rewind;
        return true;
      }
      break;
    case 15:
      HASH_GUARD_LITSTR(0x732EC1BDA8EC520FLL, NAMSTR(s_sys_ss5713adf1, "getChildren")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_getchildren;
        return true;
      }
      break;
    case 17:
      HASH_GUARD_LITSTR(0x56EDB60C824E8C51LL, NAMSTR(s_sys_ss7db173af, "key")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_key;
        return true;
      }
      break;
    case 19:
      HASH_GUARD_LITSTR(0x642C2D2994B34A13LL, NAMSTR(s_sys_ss6b4cb5ed, "__toString")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci___tostring;
        return true;
      }
      break;
    case 21:
      HASH_GUARD_LITSTR(0x40044334DA397C15LL, NAMSTR(s_sys_ss25c683eb, "hasChildren")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_haschildren;
        return true;
      }
      break;
    case 24:
      HASH_GUARD_LITSTR(0x3C6D50F3BB8102B8LL, NAMSTR(s_sys_ss447efd48, "next")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_next;
        return true;
      }
      break;
    case 27:
      HASH_GUARD_LITSTR(0x7CF26A0E76B5E27BLL, NAMSTR(s_sys_ss76b5e27b, "getSubPath")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_getsubpath;
        return true;
      }
      break;
    case 28:
      HASH_GUARD_LITSTR(0x5B3A4A72846B21DCLL, NAMSTR(s_sys_ss7b94de24, "current")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_current;
        return true;
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ss229c615f, "__construct")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci___construct;
        return true;
      }
      break;
    default:
      break;
  }
  return c_DirectoryIterator::os_get_call_info(mcp, hash);
}
bool c_RecursiveDirectoryIterator::o_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 31) {
    case 4:
      HASH_GUARD_LITSTR(0x6413CB5154808C44LL, NAMSTR(s_sys_ss54808c44, "valid")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_valid;
        mcp.obj = this;
        return true;
      }
      break;
    case 7:
      HASH_GUARD_LITSTR(0x7EF5445C77054C67LL, NAMSTR(s_sys_ss77054c67, "seek")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_seek;
        mcp.obj = this;
        return true;
      }
      break;
    case 9:
      HASH_GUARD_LITSTR(0x430BA7B88ED3A809LL, NAMSTR(s_sys_ss712c57f7, "getSubPathname")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_getsubpathname;
        mcp.obj = this;
        return true;
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x1670096FDE27AF6ALL, NAMSTR(s_sys_ss21d85096, "rewind")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_rewind;
        mcp.obj = this;
        return true;
      }
      break;
    case 15:
      HASH_GUARD_LITSTR(0x732EC1BDA8EC520FLL, NAMSTR(s_sys_ss5713adf1, "getChildren")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_getchildren;
        mcp.obj = this;
        return true;
      }
      break;
    case 17:
      HASH_GUARD_LITSTR(0x56EDB60C824E8C51LL, NAMSTR(s_sys_ss7db173af, "key")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_key;
        mcp.obj = this;
        return true;
      }
      break;
    case 19:
      HASH_GUARD_LITSTR(0x642C2D2994B34A13LL, NAMSTR(s_sys_ss6b4cb5ed, "__toString")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci___tostring;
        mcp.obj = this;
        return true;
      }
      break;
    case 21:
      HASH_GUARD_LITSTR(0x40044334DA397C15LL, NAMSTR(s_sys_ss25c683eb, "hasChildren")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_haschildren;
        mcp.obj = this;
        return true;
      }
      break;
    case 24:
      HASH_GUARD_LITSTR(0x3C6D50F3BB8102B8LL, NAMSTR(s_sys_ss447efd48, "next")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_next;
        mcp.obj = this;
        return true;
      }
      break;
    case 27:
      HASH_GUARD_LITSTR(0x7CF26A0E76B5E27BLL, NAMSTR(s_sys_ss76b5e27b, "getSubPath")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_getsubpath;
        mcp.obj = this;
        return true;
      }
      break;
    case 28:
      HASH_GUARD_LITSTR(0x5B3A4A72846B21DCLL, NAMSTR(s_sys_ss7b94de24, "current")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci_current;
        mcp.obj = this;
        return true;
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ss229c615f, "__construct")) {
        mcp.ci = &c_RecursiveDirectoryIterator::ci___construct;
        mcp.obj = this;
        return true;
      }
      break;
    default:
      break;
  }
  return c_DirectoryIterator::o_get_call_info(mcp, hash);
}
c_RecursiveDirectoryIterator *c_RecursiveDirectoryIterator::create(Variant v_path, Variant v_flags //  = 16LL /* RecursiveDirectoryIterator::CURRENT_AS_FILEINFO */
) {
  CountableHelper h(this);
  init();
  t___construct(v_path, v_flags);
  return this;
}
ObjectData *c_RecursiveDirectoryIterator::dynCreate(CArrRef params, bool construct /* = true */) {
  init();
  if (construct) {
    CountableHelper h(this);
    int count __attribute__((__unused__)) = params.size();
    if (count < 1 || count > 2) throw_wrong_arguments("RecursiveDirectoryIterator::__construct", count, 1, 2, 2);
    do {
      ArrayData *ad(params.get());
      ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
      CVarRef arg0((ad->getValue(pos)));
      if (count <= 1) {
        (t___construct(arg0));
        break;
      }
      CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
      (t___construct(arg0, arg1));
    } while (false);
  }
  return this;
}
void c_RecursiveDirectoryIterator::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count < 1 || count > 2) throw_wrong_arguments("RecursiveDirectoryIterator::__construct", count, 1, 2, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) {
      (t___construct(arg0));
      break;
    }
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1));
  } while (false);
}
void c_RecursiveDirectoryIterator::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_RecursiveDirectoryIterator::ci___construct;
  mcp.obj = this;
}
void c_RecursiveDirectoryIterator::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  int count __attribute__((__unused__)) = params.size();
  if (count < 1 || count > 2) throw_wrong_arguments("RecursiveDirectoryIterator::__construct", count, 1, 2, 1);
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  if (count <= 1) (t___construct(a0), null);
  else (t___construct(a0, a1), null);
}
struct ObjectStaticCallbacks cw_RecursiveDirectoryIterator = {
  c_RecursiveDirectoryIterator::os_getInit,
  c_RecursiveDirectoryIterator::os_get,
  c_RecursiveDirectoryIterator::os_lval,
  c_RecursiveDirectoryIterator::os_invoke,
  c_RecursiveDirectoryIterator::os_constant,
  c_RecursiveDirectoryIterator::os_get_call_info
};
void c_RecursiveDirectoryIterator::init() {
  c_DirectoryIterator::init();
}
/* SRC: classes/iterator.php line 764 */
void c_RecursiveDirectoryIterator::t___construct(Variant v_path, Variant v_flags //  = 16LL /* RecursiveDirectoryIterator::CURRENT_AS_FILEINFO */
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::__construct);
  bool oldInCtor = gasInCtor(true);
  {
    bool tmp1;
    {
      bool tmp2((x_hphp_recursivedirectoryiterator___construct(GET_THIS(), toString(v_path), toInt64(v_flags))));
      tmp1 = (!(tmp2));
    }
    if (tmp1) {
      {
        {
          p_UnexpectedValueException tmp3 = NEWOBJ(c_UnexpectedValueException)();
          throw_exception((tmp3->create(concat3(NAMSTR(s_sys_ss35f9d4be, "RecursiveDirectoryIterator::__construct("), toString(v_path), NAMSTR(s_sys_ss0c10eb92, "): failed to open dir"))), tmp3));
        }
      }
    }
  }
  gasInCtor(oldInCtor);
} /* function */
/* SRC: classes/iterator.php line 772 */
Variant c_RecursiveDirectoryIterator::t_current() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::current);
  return x_hphp_recursivedirectoryiterator_current(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 784 */
Variant c_RecursiveDirectoryIterator::t_key() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::key);
  return x_hphp_recursivedirectoryiterator_key(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 796 */
Variant c_RecursiveDirectoryIterator::t_next() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::next);
  return (x_hphp_recursivedirectoryiterator_next(GET_THIS()), null);
} /* function */
/* SRC: classes/iterator.php line 808 */
Variant c_RecursiveDirectoryIterator::t_rewind() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::rewind);
  return (x_hphp_recursivedirectoryiterator_rewind(GET_THIS()), null);
} /* function */
/* SRC: classes/iterator.php line 812 */
Variant c_RecursiveDirectoryIterator::t_seek(CVarRef v_position) {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::seek);
  {
    const CallInfo *cit30 = NULL;
    void *vt30 = NULL;
    get_call_info_or_fail(cit30, vt30, NAMSTR(s_sys_ss2ae173d5, "hphp_recursivedirectoryiterator_seek"));
    return ((cit30->getFuncFewArgs())(vt30, 1, GET_THIS(), null, null, null, null, null), null);
  }
} /* function */
/* SRC: classes/iterator.php line 816 */
String c_RecursiveDirectoryIterator::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::__toString);
  return x_hphp_recursivedirectoryiterator___tostring(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 820 */
bool c_RecursiveDirectoryIterator::t_valid() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::valid);
  return x_hphp_recursivedirectoryiterator_valid(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 833 */
bool c_RecursiveDirectoryIterator::t_haschildren() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::hasChildren);
  return x_hphp_recursivedirectoryiterator_haschildren(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 846 */
Object c_RecursiveDirectoryIterator::t_getchildren() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::getChildren);
  return x_hphp_recursivedirectoryiterator_getchildren(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 860 */
String c_RecursiveDirectoryIterator::t_getsubpath() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::getSubPath);
  return x_hphp_recursivedirectoryiterator_getsubpath(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 874 */
String c_RecursiveDirectoryIterator::t_getsubpathname() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveDirectoryIterator, RecursiveDirectoryIterator::getSubPathname);
  return x_hphp_recursivedirectoryiterator_getsubpathname(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 645 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DirectoryIterator
Variant c_DirectoryIterator::os_getInit(CStrRef s) {
  return c_SplFileInfo::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_DirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_DirectoryIterator
Variant c_DirectoryIterator::os_get(CStrRef s) {
  return c_SplFileInfo::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_DirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DirectoryIterator
Variant &c_DirectoryIterator::os_lval(CStrRef s) {
  return c_SplFileInfo::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_DirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_DirectoryIterator
void c_DirectoryIterator::o_getArray(Array &props) const {
  c_SplFileInfo::o_getArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_DirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_DirectoryIterator
void c_DirectoryIterator::o_setArray(CArrRef props) {
  c_SplFileInfo::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_DirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_DirectoryIterator
Variant * c_DirectoryIterator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_DirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DirectoryIterator
Variant * c_DirectoryIterator::o_realPropPublic(CStrRef s, int flags) const {
  return c_SplFileInfo::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_DirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DirectoryIterator
Variant * c_DirectoryIterator::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_DirectoryIterator
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_DirectoryIterator
Variant c_DirectoryIterator::os_constant(const char *s) {
  return c_SplFileInfo::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_DirectoryIterator
IMPLEMENT_CLASS(DirectoryIterator)
bool c_DirectoryIterator::o_instanceof(CStrRef s) const {
  int64 hash = s->hash();
  switch (hash & 15) {
    case 1:
      HASH_INSTANCEOF(0x66679538C5E6F0A1LL, NAMSTR(s_sys_ss3a190f5f, "traversable"));
      break;
    case 3:
      HASH_INSTANCEOF(0x60C47E7FE145DC43LL, NAMSTR(s_sys_ss1eba23bd, "seekableiterator"));
      break;
    case 7:
      HASH_INSTANCEOF(0x71089C29FE923FA7LL, NAMSTR(s_sys_ss016dc059, "splfileinfo"));
      break;
    case 14:
      HASH_INSTANCEOF(0x7754323897E8A15ELL, NAMSTR(s_sys_ss68175ea2, "directoryiterator"));
      HASH_INSTANCEOF(0x0636A5F84AF9D29ELL, NAMSTR(s_sys_ss4af9d29e, "iterator"));
      break;
    default:
      break;
  }
  return false;
}
ObjectData *c_DirectoryIterator::cloneImpl() {
  c_DirectoryIterator *obj = NEW(c_DirectoryIterator)();
  cloneSet(obj);
  return obj;
}
void c_DirectoryIterator::cloneSet(c_DirectoryIterator *clone) {
  c_SplFileInfo::cloneSet(clone);
}
Variant c_DirectoryIterator::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  if (hash < 0) hash = hash_string(s);
  switch (hash & 31) {
    case 4:
      HASH_GUARD_LITSTR(0x6413CB5154808C44LL, NAMSTR(s_sys_ss54808c44, "valid")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("DirectoryIterator::valid", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_valid());
      }
      break;
    case 7:
      HASH_GUARD_LITSTR(0x7EF5445C77054C67LL, NAMSTR(s_sys_ss77054c67, "seek")) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("DirectoryIterator::seek", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_seek(a0));
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x1670096FDE27AF6ALL, NAMSTR(s_sys_ss21d85096, "rewind")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("DirectoryIterator::rewind", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_rewind());
      }
      break;
    case 17:
      HASH_GUARD_LITSTR(0x56EDB60C824E8C51LL, NAMSTR(s_sys_ss7db173af, "key")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("DirectoryIterator::key", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_key());
      }
      break;
    case 19:
      HASH_GUARD_LITSTR(0x642C2D2994B34A13LL, NAMSTR(s_sys_ss6b4cb5ed, "__toString")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("DirectoryIterator::__toString", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 20:
      HASH_GUARD_LITSTR(0x08D1EA51B78DA5F4LL, NAMSTR(s_sys_ss48725a0c, "isDot")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("DirectoryIterator::isDot", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isdot());
      }
      break;
    case 24:
      HASH_GUARD_LITSTR(0x3C6D50F3BB8102B8LL, NAMSTR(s_sys_ss447efd48, "next")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("DirectoryIterator::next", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_next());
      }
      break;
    case 28:
      HASH_GUARD_LITSTR(0x5B3A4A72846B21DCLL, NAMSTR(s_sys_ss7b94de24, "current")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("DirectoryIterator::current", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_current());
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ss229c615f, "__construct")) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("DirectoryIterator::__construct", count, 1, 1, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(a0), null);
      }
      break;
    default:
      break;
  }
  return c_SplFileInfo::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_DirectoryIterator::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  return c_SplFileInfo::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
CallInfo c_DirectoryIterator::ci_next((void*)&c_DirectoryIterator::i_next, (void*)&c_DirectoryIterator::ifa_next, 0, 0, 0x0000000000000000LL);
CallInfo c_DirectoryIterator::ci_key((void*)&c_DirectoryIterator::i_key, (void*)&c_DirectoryIterator::ifa_key, 0, 0, 0x0000000000000000LL);
CallInfo c_DirectoryIterator::ci_valid((void*)&c_DirectoryIterator::i_valid, (void*)&c_DirectoryIterator::ifa_valid, 0, 0, 0x0000000000000000LL);
CallInfo c_DirectoryIterator::ci___tostring((void*)&c_DirectoryIterator::i___tostring, (void*)&c_DirectoryIterator::ifa___tostring, 0, 0, 0x0000000000000000LL);
CallInfo c_DirectoryIterator::ci___construct((void*)&c_DirectoryIterator::i___construct, (void*)&c_DirectoryIterator::ifa___construct, 1, 0, 0x0000000000000000LL);
CallInfo c_DirectoryIterator::ci_seek((void*)&c_DirectoryIterator::i_seek, (void*)&c_DirectoryIterator::ifa_seek, 1, 0, 0x0000000000000000LL);
CallInfo c_DirectoryIterator::ci_current((void*)&c_DirectoryIterator::i_current, (void*)&c_DirectoryIterator::ifa_current, 0, 0, 0x0000000000000000LL);
CallInfo c_DirectoryIterator::ci_isdot((void*)&c_DirectoryIterator::i_isdot, (void*)&c_DirectoryIterator::ifa_isdot, 0, 0, 0x0000000000000000LL);
CallInfo c_DirectoryIterator::ci_rewind((void*)&c_DirectoryIterator::i_rewind, (void*)&c_DirectoryIterator::ifa_rewind, 0, 0, 0x0000000000000000LL);
Variant c_DirectoryIterator::i_next(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("DirectoryIterator::next", 0, 1);
  return (self->t_next());
}
Variant c_DirectoryIterator::i_key(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("DirectoryIterator::key", 0, 1);
  return (self->t_key());
}
Variant c_DirectoryIterator::i_valid(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("DirectoryIterator::valid", 0, 1);
  return (self->t_valid());
}
Variant c_DirectoryIterator::i___tostring(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("DirectoryIterator::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_DirectoryIterator::i___construct(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("DirectoryIterator::__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t___construct(arg0), null);
  }
}
Variant c_DirectoryIterator::i_seek(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("DirectoryIterator::seek", count, 1, 1, 1);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    return (self->t_seek(arg0));
  }
}
Variant c_DirectoryIterator::i_current(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("DirectoryIterator::current", 0, 1);
  return (self->t_current());
}
Variant c_DirectoryIterator::i_isdot(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("DirectoryIterator::isDot", 0, 1);
  return (self->t_isdot());
}
Variant c_DirectoryIterator::i_rewind(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("DirectoryIterator::rewind", 0, 1);
  return (self->t_rewind());
}
Variant c_DirectoryIterator::ifa_next(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("DirectoryIterator::next", 0, 1);
  return (self->t_next());
}
Variant c_DirectoryIterator::ifa_key(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("DirectoryIterator::key", 0, 1);
  return (self->t_key());
}
Variant c_DirectoryIterator::ifa_valid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("DirectoryIterator::valid", 0, 1);
  return (self->t_valid());
}
Variant c_DirectoryIterator::ifa___tostring(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("DirectoryIterator::__toString", 0, 1);
  return (self->t___tostring());
}
Variant c_DirectoryIterator::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("DirectoryIterator::__construct", count, 1, 1, 2);
  return (self->t___construct(a0), null);
}
Variant c_DirectoryIterator::ifa_seek(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count != 1) return throw_wrong_arguments("DirectoryIterator::seek", count, 1, 1, 1);
  return (self->t_seek(a0));
}
Variant c_DirectoryIterator::ifa_current(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("DirectoryIterator::current", 0, 1);
  return (self->t_current());
}
Variant c_DirectoryIterator::ifa_isdot(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("DirectoryIterator::isDot", 0, 1);
  return (self->t_isdot());
}
Variant c_DirectoryIterator::ifa_rewind(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_DirectoryIterator *self = NULL;
  p_DirectoryIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_DirectoryIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_DirectoryIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("DirectoryIterator::rewind", 0, 1);
  return (self->t_rewind());
}
bool c_DirectoryIterator::os_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 31) {
    case 4:
      HASH_GUARD_LITSTR(0x6413CB5154808C44LL, NAMSTR(s_sys_ss54808c44, "valid")) {
        mcp.ci = &c_DirectoryIterator::ci_valid;
        return true;
      }
      break;
    case 7:
      HASH_GUARD_LITSTR(0x7EF5445C77054C67LL, NAMSTR(s_sys_ss77054c67, "seek")) {
        mcp.ci = &c_DirectoryIterator::ci_seek;
        return true;
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x1670096FDE27AF6ALL, NAMSTR(s_sys_ss21d85096, "rewind")) {
        mcp.ci = &c_DirectoryIterator::ci_rewind;
        return true;
      }
      break;
    case 17:
      HASH_GUARD_LITSTR(0x56EDB60C824E8C51LL, NAMSTR(s_sys_ss7db173af, "key")) {
        mcp.ci = &c_DirectoryIterator::ci_key;
        return true;
      }
      break;
    case 19:
      HASH_GUARD_LITSTR(0x642C2D2994B34A13LL, NAMSTR(s_sys_ss6b4cb5ed, "__toString")) {
        mcp.ci = &c_DirectoryIterator::ci___tostring;
        return true;
      }
      break;
    case 20:
      HASH_GUARD_LITSTR(0x08D1EA51B78DA5F4LL, NAMSTR(s_sys_ss48725a0c, "isDot")) {
        mcp.ci = &c_DirectoryIterator::ci_isdot;
        return true;
      }
      break;
    case 24:
      HASH_GUARD_LITSTR(0x3C6D50F3BB8102B8LL, NAMSTR(s_sys_ss447efd48, "next")) {
        mcp.ci = &c_DirectoryIterator::ci_next;
        return true;
      }
      break;
    case 28:
      HASH_GUARD_LITSTR(0x5B3A4A72846B21DCLL, NAMSTR(s_sys_ss7b94de24, "current")) {
        mcp.ci = &c_DirectoryIterator::ci_current;
        return true;
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ss229c615f, "__construct")) {
        mcp.ci = &c_DirectoryIterator::ci___construct;
        return true;
      }
      break;
    default:
      break;
  }
  return c_SplFileInfo::os_get_call_info(mcp, hash);
}
bool c_DirectoryIterator::o_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 31) {
    case 4:
      HASH_GUARD_LITSTR(0x6413CB5154808C44LL, NAMSTR(s_sys_ss54808c44, "valid")) {
        mcp.ci = &c_DirectoryIterator::ci_valid;
        mcp.obj = this;
        return true;
      }
      break;
    case 7:
      HASH_GUARD_LITSTR(0x7EF5445C77054C67LL, NAMSTR(s_sys_ss77054c67, "seek")) {
        mcp.ci = &c_DirectoryIterator::ci_seek;
        mcp.obj = this;
        return true;
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x1670096FDE27AF6ALL, NAMSTR(s_sys_ss21d85096, "rewind")) {
        mcp.ci = &c_DirectoryIterator::ci_rewind;
        mcp.obj = this;
        return true;
      }
      break;
    case 17:
      HASH_GUARD_LITSTR(0x56EDB60C824E8C51LL, NAMSTR(s_sys_ss7db173af, "key")) {
        mcp.ci = &c_DirectoryIterator::ci_key;
        mcp.obj = this;
        return true;
      }
      break;
    case 19:
      HASH_GUARD_LITSTR(0x642C2D2994B34A13LL, NAMSTR(s_sys_ss6b4cb5ed, "__toString")) {
        mcp.ci = &c_DirectoryIterator::ci___tostring;
        mcp.obj = this;
        return true;
      }
      break;
    case 20:
      HASH_GUARD_LITSTR(0x08D1EA51B78DA5F4LL, NAMSTR(s_sys_ss48725a0c, "isDot")) {
        mcp.ci = &c_DirectoryIterator::ci_isdot;
        mcp.obj = this;
        return true;
      }
      break;
    case 24:
      HASH_GUARD_LITSTR(0x3C6D50F3BB8102B8LL, NAMSTR(s_sys_ss447efd48, "next")) {
        mcp.ci = &c_DirectoryIterator::ci_next;
        mcp.obj = this;
        return true;
      }
      break;
    case 28:
      HASH_GUARD_LITSTR(0x5B3A4A72846B21DCLL, NAMSTR(s_sys_ss7b94de24, "current")) {
        mcp.ci = &c_DirectoryIterator::ci_current;
        mcp.obj = this;
        return true;
      }
      break;
    case 31:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ss229c615f, "__construct")) {
        mcp.ci = &c_DirectoryIterator::ci___construct;
        mcp.obj = this;
        return true;
      }
      break;
    default:
      break;
  }
  return c_SplFileInfo::o_get_call_info(mcp, hash);
}
c_DirectoryIterator *c_DirectoryIterator::create(Variant v_path) {
  CountableHelper h(this);
  init();
  t___construct(v_path);
  return this;
}
ObjectData *c_DirectoryIterator::dynCreate(CArrRef params, bool construct /* = true */) {
  init();
  if (construct) {
    CountableHelper h(this);
    int count __attribute__((__unused__)) = params.size();
    if (count != 1) throw_wrong_arguments("DirectoryIterator::__construct", count, 1, 1, 2);
    {
      ArrayData *ad(params.get());
      ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
      CVarRef arg0((ad->getValue(pos)));
      (t___construct(arg0));
    }
  }
  return this;
}
void c_DirectoryIterator::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 1) throw_wrong_arguments("DirectoryIterator::__construct", count, 1, 1, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    (t___construct(arg0));
  }
}
void c_DirectoryIterator::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_DirectoryIterator::ci___construct;
  mcp.obj = this;
}
void c_DirectoryIterator::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  int count __attribute__((__unused__)) = params.size();
  if (count != 1) throw_wrong_arguments("DirectoryIterator::__construct", count, 1, 1, 1);
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  (t___construct(a0), null);
}
struct ObjectStaticCallbacks cw_DirectoryIterator = {
  c_DirectoryIterator::os_getInit,
  c_DirectoryIterator::os_get,
  c_DirectoryIterator::os_lval,
  c_DirectoryIterator::os_invoke,
  c_DirectoryIterator::os_constant,
  c_DirectoryIterator::os_get_call_info
};
void c_DirectoryIterator::init() {
  c_SplFileInfo::init();
}
/* SRC: classes/iterator.php line 647 */
void c_DirectoryIterator::t___construct(Variant v_path) {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::__construct);
  bool oldInCtor = gasInCtor(true);
  {
    bool tmp1;
    {
      bool tmp2((x_hphp_directoryiterator___construct(GET_THIS(), toString(v_path))));
      tmp1 = (!(tmp2));
    }
    if (tmp1) {
      {
        {
          p_UnexpectedValueException tmp3 = NEWOBJ(c_UnexpectedValueException)();
          throw_exception((tmp3->create(concat3(NAMSTR(s_sys_ss3c6754b7, "DirectoryIterator::__construct("), toString(v_path), NAMSTR(s_sys_ss0c10eb92, "): failed to open dir"))), tmp3));
        }
      }
    }
  }
  gasInCtor(oldInCtor);
} /* function */
/* SRC: classes/iterator.php line 662 */
Variant c_DirectoryIterator::t_current() {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::current);
  return x_hphp_directoryiterator_current(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 674 */
Variant c_DirectoryIterator::t_key() {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::key);
  return x_hphp_directoryiterator_key(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 686 */
Variant c_DirectoryIterator::t_next() {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::next);
  return (x_hphp_directoryiterator_next(GET_THIS()), null);
} /* function */
/* SRC: classes/iterator.php line 698 */
Variant c_DirectoryIterator::t_rewind() {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::rewind);
  return (x_hphp_directoryiterator_rewind(GET_THIS()), null);
} /* function */
/* SRC: classes/iterator.php line 712 */
Variant c_DirectoryIterator::t_seek(CVarRef v_position) {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::seek);
  return (x_hphp_directoryiterator_seek(GET_THIS(), toInt64(v_position)), null);
} /* function */
/* SRC: classes/iterator.php line 716 */
String c_DirectoryIterator::t___tostring() {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::__toString);
  return x_hphp_directoryiterator___tostring(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 729 */
bool c_DirectoryIterator::t_valid() {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::valid);
  return x_hphp_directoryiterator_valid(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 742 */
bool c_DirectoryIterator::t_isdot() {
  INSTANCE_METHOD_INJECTION_BUILTIN(DirectoryIterator, DirectoryIterator::isDot);
  return x_hphp_directoryiterator_isdot(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 164 */
const int64 q_RecursiveIteratorIterator_LEAVES_ONLY = 0LL;
const int64 q_RecursiveIteratorIterator_SELF_FIRST = 1LL;
const int64 q_RecursiveIteratorIterator_CHILD_FIRST = 2LL;
const int64 q_RecursiveIteratorIterator_CATCH_GET_CHILD = 16LL;
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_RecursiveIteratorIterator
Variant c_RecursiveIteratorIterator::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_RecursiveIteratorIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_RecursiveIteratorIterator
Variant c_RecursiveIteratorIterator::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_RecursiveIteratorIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_RecursiveIteratorIterator
Variant &c_RecursiveIteratorIterator::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_RecursiveIteratorIterator
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_RecursiveIteratorIterator
void c_RecursiveIteratorIterator::o_getArray(Array &props) const {
  c_ObjectData::o_getArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_RecursiveIteratorIterator
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_RecursiveIteratorIterator
void c_RecursiveIteratorIterator::o_setArray(CArrRef props) {
  c_ObjectData::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_RecursiveIteratorIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_RecursiveIteratorIterator
Variant * c_RecursiveIteratorIterator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_RecursiveIteratorIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_RecursiveIteratorIterator
Variant * c_RecursiveIteratorIterator::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_RecursiveIteratorIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_RecursiveIteratorIterator
Variant * c_RecursiveIteratorIterator::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_RecursiveIteratorIterator
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_RecursiveIteratorIterator
Variant c_RecursiveIteratorIterator::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 7) {
    case 1:
      HASH_RETURN(0x618BE0B31B5C1FD1LL, q_RecursiveIteratorIterator_CHILD_FIRST, "CHILD_FIRST");
      break;
    case 4:
      HASH_RETURN(0x181DAA5BC4B24F6CLL, q_RecursiveIteratorIterator_LEAVES_ONLY, "LEAVES_ONLY");
      HASH_RETURN(0x7F32D13555655AA4LL, q_RecursiveIteratorIterator_CATCH_GET_CHILD, "CATCH_GET_CHILD");
      break;
    case 5:
      HASH_RETURN(0x0822A034E83D2285LL, q_RecursiveIteratorIterator_SELF_FIRST, "SELF_FIRST");
      break;
    default:
      break;
  }
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_RecursiveIteratorIterator
IMPLEMENT_CLASS(RecursiveIteratorIterator)
bool c_RecursiveIteratorIterator::o_instanceof(CStrRef s) const {
  int64 hash = s->hash();
  switch (hash & 7) {
    case 1:
      HASH_INSTANCEOF(0x66679538C5E6F0A1LL, NAMSTR(s_sys_ss3a190f5f, "traversable"));
      break;
    case 2:
      HASH_INSTANCEOF(0x365899865E2EAA32LL, NAMSTR(s_sys_ss5e2eaa32, "recursiveiteratoriterator"));
      break;
    case 5:
      HASH_INSTANCEOF(0x39CA0210AC8E528DLL, NAMSTR(s_sys_ss5371ad73, "outeriterator"));
      break;
    case 6:
      HASH_INSTANCEOF(0x0636A5F84AF9D29ELL, NAMSTR(s_sys_ss4af9d29e, "iterator"));
      break;
    default:
      break;
  }
  return false;
}
ObjectData *c_RecursiveIteratorIterator::cloneImpl() {
  c_RecursiveIteratorIterator *obj = NEW(c_RecursiveIteratorIterator)();
  cloneSet(obj);
  return obj;
}
void c_RecursiveIteratorIterator::cloneSet(c_RecursiveIteratorIterator *clone) {
  ObjectData::cloneSet(clone);
}
Variant c_RecursiveIteratorIterator::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  if (hash < 0) hash = hash_string(s);
  switch (hash & 15) {
    case 1:
      HASH_GUARD_LITSTR(0x56EDB60C824E8C51LL, NAMSTR(s_sys_ss7db173af, "key")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::key", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_key());
      }
      break;
    case 4:
      HASH_GUARD_LITSTR(0x6413CB5154808C44LL, NAMSTR(s_sys_ss54808c44, "valid")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::valid", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_valid());
      }
      HASH_GUARD_LITSTR(0x3106F858B09C7424LL, NAMSTR(s_sys_ss4f638bdc, "getInnerIterator")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::getInnerIterator", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getinneriterator());
      }
      break;
    case 8:
      HASH_GUARD_LITSTR(0x3C6D50F3BB8102B8LL, NAMSTR(s_sys_ss447efd48, "next")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::next", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_next());
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x1670096FDE27AF6ALL, NAMSTR(s_sys_ss21d85096, "rewind")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::rewind", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_rewind());
      }
      break;
    case 12:
      HASH_GUARD_LITSTR(0x5B3A4A72846B21DCLL, NAMSTR(s_sys_ss7b94de24, "current")) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::current", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_current());
      }
      break;
    case 15:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ss229c615f, "__construct")) {
        Variant a0;
        Variant a1;
        Variant a2;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count < 1 || count > 3) return throw_wrong_arguments("RecursiveIteratorIterator::__construct", count, 1, 3, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a2 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 1) return (t___construct(a0), null);
        else if (count == 2) return (t___construct(a0, a1), null);
        else return (t___construct(a0, a1, a2), null);
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_RecursiveIteratorIterator::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  return c_ObjectData::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
CallInfo c_RecursiveIteratorIterator::ci_next((void*)&c_RecursiveIteratorIterator::i_next, (void*)&c_RecursiveIteratorIterator::ifa_next, 0, 0, 0x0000000000000000LL);
CallInfo c_RecursiveIteratorIterator::ci_key((void*)&c_RecursiveIteratorIterator::i_key, (void*)&c_RecursiveIteratorIterator::ifa_key, 0, 0, 0x0000000000000000LL);
CallInfo c_RecursiveIteratorIterator::ci_valid((void*)&c_RecursiveIteratorIterator::i_valid, (void*)&c_RecursiveIteratorIterator::ifa_valid, 0, 0, 0x0000000000000000LL);
CallInfo c_RecursiveIteratorIterator::ci_getinneriterator((void*)&c_RecursiveIteratorIterator::i_getinneriterator, (void*)&c_RecursiveIteratorIterator::ifa_getinneriterator, 0, 0, 0x0000000000000000LL);
CallInfo c_RecursiveIteratorIterator::ci___construct((void*)&c_RecursiveIteratorIterator::i___construct, (void*)&c_RecursiveIteratorIterator::ifa___construct, 3, 0, 0x0000000000000000LL);
CallInfo c_RecursiveIteratorIterator::ci_current((void*)&c_RecursiveIteratorIterator::i_current, (void*)&c_RecursiveIteratorIterator::ifa_current, 0, 0, 0x0000000000000000LL);
CallInfo c_RecursiveIteratorIterator::ci_rewind((void*)&c_RecursiveIteratorIterator::i_rewind, (void*)&c_RecursiveIteratorIterator::ifa_rewind, 0, 0, 0x0000000000000000LL);
Variant c_RecursiveIteratorIterator::i_next(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveIteratorIterator *self = NULL;
  p_RecursiveIteratorIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveIteratorIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveIteratorIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::next", 0, 1);
  return (self->t_next());
}
Variant c_RecursiveIteratorIterator::i_key(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveIteratorIterator *self = NULL;
  p_RecursiveIteratorIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveIteratorIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveIteratorIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::key", 0, 1);
  return (self->t_key());
}
Variant c_RecursiveIteratorIterator::i_valid(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveIteratorIterator *self = NULL;
  p_RecursiveIteratorIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveIteratorIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveIteratorIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::valid", 0, 1);
  return (self->t_valid());
}
Variant c_RecursiveIteratorIterator::i_getinneriterator(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveIteratorIterator *self = NULL;
  p_RecursiveIteratorIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveIteratorIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveIteratorIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::getInnerIterator", 0, 1);
  return (self->t_getinneriterator());
}
Variant c_RecursiveIteratorIterator::i___construct(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveIteratorIterator *self = NULL;
  p_RecursiveIteratorIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveIteratorIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveIteratorIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count < 1 || count > 3) return throw_wrong_arguments("RecursiveIteratorIterator::__construct", count, 1, 3, 2);
  {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) return (self->t___construct(arg0), null);
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count == 2) return (self->t___construct(arg0, arg1), null);
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    return (self->t___construct(arg0, arg1, arg2), null);
  }
}
Variant c_RecursiveIteratorIterator::i_current(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveIteratorIterator *self = NULL;
  p_RecursiveIteratorIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveIteratorIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveIteratorIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::current", 0, 1);
  return (self->t_current());
}
Variant c_RecursiveIteratorIterator::i_rewind(MethodCallPackage &mcp, CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  c_RecursiveIteratorIterator *self = NULL;
  p_RecursiveIteratorIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveIteratorIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveIteratorIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::rewind", 0, 1);
  return (self->t_rewind());
}
Variant c_RecursiveIteratorIterator::ifa_next(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveIteratorIterator *self = NULL;
  p_RecursiveIteratorIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveIteratorIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveIteratorIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::next", 0, 1);
  return (self->t_next());
}
Variant c_RecursiveIteratorIterator::ifa_key(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveIteratorIterator *self = NULL;
  p_RecursiveIteratorIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveIteratorIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveIteratorIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::key", 0, 1);
  return (self->t_key());
}
Variant c_RecursiveIteratorIterator::ifa_valid(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveIteratorIterator *self = NULL;
  p_RecursiveIteratorIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveIteratorIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveIteratorIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::valid", 0, 1);
  return (self->t_valid());
}
Variant c_RecursiveIteratorIterator::ifa_getinneriterator(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveIteratorIterator *self = NULL;
  p_RecursiveIteratorIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveIteratorIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveIteratorIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::getInnerIterator", 0, 1);
  return (self->t_getinneriterator());
}
Variant c_RecursiveIteratorIterator::ifa___construct(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveIteratorIterator *self = NULL;
  p_RecursiveIteratorIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveIteratorIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveIteratorIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count < 1 || count > 3) return throw_wrong_arguments("RecursiveIteratorIterator::__construct", count, 1, 3, 2);
  if (count <= 1) return (self->t___construct(a0), null);
  if (count == 2) return (self->t___construct(a0, a1), null);
  return (self->t___construct(a0, a1, a2), null);
}
Variant c_RecursiveIteratorIterator::ifa_current(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveIteratorIterator *self = NULL;
  p_RecursiveIteratorIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveIteratorIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveIteratorIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::current", 0, 1);
  return (self->t_current());
}
Variant c_RecursiveIteratorIterator::ifa_rewind(MethodCallPackage &mcp, int count, INVOKE_FEW_ARGS_IMPL_ARGS) {
  c_RecursiveIteratorIterator *self = NULL;
  p_RecursiveIteratorIterator pobj;
  if (mcp.obj) {
    self = static_cast<c_RecursiveIteratorIterator*>(mcp.obj);
  } else {
    pobj = (NEW(c_RecursiveIteratorIterator)());
    pobj->init();
    pobj->setDummy();
    self = pobj.get();
  }
  if (count > 0) return throw_toomany_arguments("RecursiveIteratorIterator::rewind", 0, 1);
  return (self->t_rewind());
}
bool c_RecursiveIteratorIterator::os_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 15) {
    case 1:
      HASH_GUARD_LITSTR(0x56EDB60C824E8C51LL, NAMSTR(s_sys_ss7db173af, "key")) {
        mcp.ci = &c_RecursiveIteratorIterator::ci_key;
        return true;
      }
      break;
    case 4:
      HASH_GUARD_LITSTR(0x6413CB5154808C44LL, NAMSTR(s_sys_ss54808c44, "valid")) {
        mcp.ci = &c_RecursiveIteratorIterator::ci_valid;
        return true;
      }
      HASH_GUARD_LITSTR(0x3106F858B09C7424LL, NAMSTR(s_sys_ss4f638bdc, "getInnerIterator")) {
        mcp.ci = &c_RecursiveIteratorIterator::ci_getinneriterator;
        return true;
      }
      break;
    case 8:
      HASH_GUARD_LITSTR(0x3C6D50F3BB8102B8LL, NAMSTR(s_sys_ss447efd48, "next")) {
        mcp.ci = &c_RecursiveIteratorIterator::ci_next;
        return true;
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x1670096FDE27AF6ALL, NAMSTR(s_sys_ss21d85096, "rewind")) {
        mcp.ci = &c_RecursiveIteratorIterator::ci_rewind;
        return true;
      }
      break;
    case 12:
      HASH_GUARD_LITSTR(0x5B3A4A72846B21DCLL, NAMSTR(s_sys_ss7b94de24, "current")) {
        mcp.ci = &c_RecursiveIteratorIterator::ci_current;
        return true;
      }
      break;
    case 15:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ss229c615f, "__construct")) {
        mcp.ci = &c_RecursiveIteratorIterator::ci___construct;
        return true;
      }
      break;
    default:
      break;
  }
  return c_ObjectData::os_get_call_info(mcp, hash);
}
bool c_RecursiveIteratorIterator::o_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (mcp.name);
  if (hash < 0) hash = s->hash();
  switch (hash & 15) {
    case 1:
      HASH_GUARD_LITSTR(0x56EDB60C824E8C51LL, NAMSTR(s_sys_ss7db173af, "key")) {
        mcp.ci = &c_RecursiveIteratorIterator::ci_key;
        mcp.obj = this;
        return true;
      }
      break;
    case 4:
      HASH_GUARD_LITSTR(0x6413CB5154808C44LL, NAMSTR(s_sys_ss54808c44, "valid")) {
        mcp.ci = &c_RecursiveIteratorIterator::ci_valid;
        mcp.obj = this;
        return true;
      }
      HASH_GUARD_LITSTR(0x3106F858B09C7424LL, NAMSTR(s_sys_ss4f638bdc, "getInnerIterator")) {
        mcp.ci = &c_RecursiveIteratorIterator::ci_getinneriterator;
        mcp.obj = this;
        return true;
      }
      break;
    case 8:
      HASH_GUARD_LITSTR(0x3C6D50F3BB8102B8LL, NAMSTR(s_sys_ss447efd48, "next")) {
        mcp.ci = &c_RecursiveIteratorIterator::ci_next;
        mcp.obj = this;
        return true;
      }
      break;
    case 10:
      HASH_GUARD_LITSTR(0x1670096FDE27AF6ALL, NAMSTR(s_sys_ss21d85096, "rewind")) {
        mcp.ci = &c_RecursiveIteratorIterator::ci_rewind;
        mcp.obj = this;
        return true;
      }
      break;
    case 12:
      HASH_GUARD_LITSTR(0x5B3A4A72846B21DCLL, NAMSTR(s_sys_ss7b94de24, "current")) {
        mcp.ci = &c_RecursiveIteratorIterator::ci_current;
        mcp.obj = this;
        return true;
      }
      break;
    case 15:
      HASH_GUARD_LITSTR(0x0D31D0AC229C615FLL, NAMSTR(s_sys_ss229c615f, "__construct")) {
        mcp.ci = &c_RecursiveIteratorIterator::ci___construct;
        mcp.obj = this;
        return true;
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_get_call_info(mcp, hash);
}
c_RecursiveIteratorIterator *c_RecursiveIteratorIterator::create(Variant v_iterator, Variant v_mode //  = 0LL /* RecursiveIteratorIterator::LEAVES_ONLY */
, Variant v_flags //  = 0LL
) {
  CountableHelper h(this);
  init();
  t___construct(v_iterator, v_mode, v_flags);
  return this;
}
ObjectData *c_RecursiveIteratorIterator::dynCreate(CArrRef params, bool construct /* = true */) {
  init();
  if (construct) {
    CountableHelper h(this);
    int count __attribute__((__unused__)) = params.size();
    if (count < 1 || count > 3) throw_wrong_arguments("RecursiveIteratorIterator::__construct", count, 1, 3, 2);
    do {
      ArrayData *ad(params.get());
      ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
      CVarRef arg0((ad->getValue(pos)));
      if (count <= 1) {
        (t___construct(arg0));
        break;
      }
      CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
      if (count == 2) {
        (t___construct(arg0, arg1));
        break;
      }
      CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
      (t___construct(arg0, arg1, arg2));
    } while (false);
  }
  return this;
}
void c_RecursiveIteratorIterator::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count < 1 || count > 3) throw_wrong_arguments("RecursiveIteratorIterator::__construct", count, 1, 3, 2);
  do {
    ArrayData *ad(params.get());
    ssize_t pos = ad ? ad->iter_begin() : ArrayData::invalid_index;
    CVarRef arg0((ad->getValue(pos)));
    if (count <= 1) {
      (t___construct(arg0));
      break;
    }
    CVarRef arg1((ad->getValue(pos = ad->iter_advance(pos))));
    if (count == 2) {
      (t___construct(arg0, arg1));
      break;
    }
    CVarRef arg2((ad->getValue(pos = ad->iter_advance(pos))));
    (t___construct(arg0, arg1, arg2));
  } while (false);
}
void c_RecursiveIteratorIterator::getConstructor(MethodCallPackage &mcp) {
  mcp.ci = &c_RecursiveIteratorIterator::ci___construct;
  mcp.obj = this;
}
void c_RecursiveIteratorIterator::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  int count __attribute__((__unused__)) = params.size();
  if (count < 1 || count > 3) throw_wrong_arguments("RecursiveIteratorIterator::__construct", count, 1, 3, 1);
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  if (count <= 1) (t___construct(a0), null);
  else if (count == 2) (t___construct(a0, a1), null);
  else (t___construct(a0, a1, a2), null);
}
struct ObjectStaticCallbacks cw_RecursiveIteratorIterator = {
  c_RecursiveIteratorIterator::os_getInit,
  c_RecursiveIteratorIterator::os_get,
  c_RecursiveIteratorIterator::os_lval,
  c_RecursiveIteratorIterator::os_invoke,
  c_RecursiveIteratorIterator::os_constant,
  c_RecursiveIteratorIterator::os_get_call_info
};
void c_RecursiveIteratorIterator::init() {
}
/* SRC: classes/iterator.php line 170 */
void c_RecursiveIteratorIterator::t___construct(Variant v_iterator, Variant v_mode //  = 0LL /* RecursiveIteratorIterator::LEAVES_ONLY */
, Variant v_flags //  = 0LL
) {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveIteratorIterator, RecursiveIteratorIterator::__construct);
  bool oldInCtor = gasInCtor(true);
  x_hphp_recursiveiteratoriterator___construct(GET_THIS(), toObject(v_iterator), toInt64(v_mode), toInt64(v_flags));
  gasInCtor(oldInCtor);
} /* function */
/* SRC: classes/iterator.php line 186 */
Object c_RecursiveIteratorIterator::t_getinneriterator() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveIteratorIterator, RecursiveIteratorIterator::getInnerIterator);
  return x_hphp_recursiveiteratoriterator_getinneriterator(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 197 */
Variant c_RecursiveIteratorIterator::t_current() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveIteratorIterator, RecursiveIteratorIterator::current);
  return x_hphp_recursiveiteratoriterator_current(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 208 */
Variant c_RecursiveIteratorIterator::t_key() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveIteratorIterator, RecursiveIteratorIterator::key);
  return x_hphp_recursiveiteratoriterator_key(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 219 */
Variant c_RecursiveIteratorIterator::t_next() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveIteratorIterator, RecursiveIteratorIterator::next);
  return (x_hphp_recursiveiteratoriterator_next(GET_THIS()), null);
} /* function */
/* SRC: classes/iterator.php line 230 */
Variant c_RecursiveIteratorIterator::t_rewind() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveIteratorIterator, RecursiveIteratorIterator::rewind);
  return (x_hphp_recursiveiteratoriterator_rewind(GET_THIS()), null);
} /* function */
/* SRC: classes/iterator.php line 242 */
bool c_RecursiveIteratorIterator::t_valid() {
  INSTANCE_METHOD_INJECTION_BUILTIN(RecursiveIteratorIterator, RecursiveIteratorIterator::valid);
  return x_hphp_recursiveiteratoriterator_valid(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 888 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_FilterIterator
Variant c_FilterIterator::os_getInit(CStrRef s) {
  return c_ObjectData::os_getInit(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_FilterIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_FilterIterator
Variant c_FilterIterator::os_get(CStrRef s) {
  return c_ObjectData::os_get(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_FilterIterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_FilterIterator
Variant &c_FilterIterator::os_lval(CStrRef s) {
  return c_ObjectData::os_lval(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_FilterIterator
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_FilterIterator
void c_FilterIterator::o_getArray(Array &props) const {
  c_ObjectData::o_getArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_FilterIterator
#ifndef OMIT_JUMP_TABLE_CLASS_SETARRAY_FilterIterator
void c_FilterIterator::o_setArray(CArrRef props) {
  c_ObjectData::o_setArray(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_SETARRAY_FilterIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_FilterIterator
Variant * c_FilterIterator::o_realProp(CStrRef prop, int flags, CStrRef context) const {
  return o_realPropPublic(prop, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_FilterIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_FilterIterator
Variant * c_FilterIterator::o_realPropPublic(CStrRef s, int flags) const {
  return c_ObjectData::o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PUBLIC_FilterIterator
#ifndef OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_FilterIterator
Variant * c_FilterIterator::o_realPropPrivate(CStrRef s, int flags) const {
  return o_realPropPublic(s, flags);
}
#endif // OMIT_JUMP_TABLE_CLASS_realProp_PRIVATE_FilterIterator
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_FilterIterator
Variant c_FilterIterator::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_FilterIterator
IMPLEMENT_CLASS(FilterIterator)
bool c_FilterIterator::o_instanceof(CStrRef s) const {
  int64 hash = s->hash();
  switch (hash & 7) {
    case 1:
      HASH_INSTANCEOF(0x7A394042E7488231LL, NAMSTR(s_sys_ss18b77dcf, "filteriterator"));
      HASH_INSTANCEOF(0x66679538C5E6F0A1LL, NAMSTR(s_sys_ss3a190f5f, "traversable"));
      break;
    case 5:
      HASH_INSTANCEOF(0x39CA0210AC8E528DLL, NAMSTR(s_sys_ss5371ad73, "outeriterator"));
      break;
    case 6:
      HASH_INSTANCEOF(0x0636A5F84AF9D29ELL, NAMSTR(s_sys_ss4af9d29e, "iterator"));
      break;
    default:
      break;
  }
  return false;
}
ObjectData *c_FilterIterator::cloneImpl() {
  c_FilterIterator *obj = NEW(c_FilterIterator)();
  cloneSet(obj);
  return obj;
}
void c_FilterIterator::cloneSet(c_FilterIterator *clone) {
  ObjectData::cloneSet(clone);
}
Variant c_FilterIterator::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  return c_ObjectData::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_FilterIterator::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  return c_ObjectData::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
bool c_FilterIterator::os_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (mcp.name);
  return c_ObjectData::os_get_call_info(mcp, hash);
}
bool c_FilterIterator::o_get_call_info(MethodCallPackage &mcp, int64 hash) {
  CStrRef s __attribute__((__unused__)) (mcp.name);
  return c_ObjectData::o_get_call_info(mcp, hash);
}
struct ObjectStaticCallbacks cw_FilterIterator = {
  c_FilterIterator::os_getInit,
  c_FilterIterator::os_get,
  c_FilterIterator::os_lval,
  c_FilterIterator::os_invoke,
  c_FilterIterator::os_constant,
  c_FilterIterator::os_get_call_info
};
void c_FilterIterator::init() {
}
Object co_ArrayIterator(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_ArrayIterator)())->dynCreate(params, init));
}
Object coo_ArrayIterator() {
  Object r(NEW(c_ArrayIterator)());
  r->init();
  return r;
}
Object co_AppendIterator(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_AppendIterator)())->dynCreate(params, init));
}
Object coo_AppendIterator() {
  Object r(NEW(c_AppendIterator)());
  r->init();
  return r;
}
Object co_RecursiveDirectoryIterator(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_RecursiveDirectoryIterator)())->dynCreate(params, init));
}
Object coo_RecursiveDirectoryIterator() {
  Object r(NEW(c_RecursiveDirectoryIterator)());
  r->init();
  return r;
}
Object co_DirectoryIterator(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_DirectoryIterator)())->dynCreate(params, init));
}
Object coo_DirectoryIterator() {
  Object r(NEW(c_DirectoryIterator)());
  r->init();
  return r;
}
Object co_RecursiveIteratorIterator(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_RecursiveIteratorIterator)())->dynCreate(params, init));
}
Object coo_RecursiveIteratorIterator() {
  Object r(NEW(c_RecursiveIteratorIterator)());
  r->init();
  return r;
}
Object co_FilterIterator(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_FilterIterator)())->dynCreate(params, init));
}
Object coo_FilterIterator() {
  Object r(NEW(c_FilterIterator)());
  r->init();
  return r;
}
Variant pm_php$classes$iterator_php(bool incOnce /* = false */, LVariableTable* variables /* = NULL */, Globals *globals /* = get_globals() */) {
  PSEUDOMAIN_INJECTION_BUILTIN(run_init::classes/iterator.php, pm_php$classes$iterator_php);
  LVariableTable *gVariables __attribute__((__unused__)) = (LVariableTable *)g;
  return true;
} /* function */

///////////////////////////////////////////////////////////////////////////////
}
